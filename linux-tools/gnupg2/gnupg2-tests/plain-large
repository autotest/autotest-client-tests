		      A Hacker's Guide to GNUPG
		   ================================
		   (Some notes on GNUPG internals.)


		   ===> Under construction <=======


RFCs
====

1423  Privacy Enhancement for Internet Electronic Mail:
      Part III: Algorithms, Modes, and Identifiers.

1489  Registration of a Cyrillic Character Set.

1750  Randomness Recommendations for Security.

1991  PGP Message Exchange Formats.

2015  MIME Security with Pretty Good Privacy (PGP).

2144  The CAST-128 Encryption Algorithm.

2279  UTF-8, a transformation format of ISO 10646.

2440  OpenPGP.



Directory Layout
----------------
  ./	       Readme, configure
  ./agent      Gpg-agent and related tools
  ./doc        Documentation
  ./doc        Documentation
  ./g10        Gpg program here called gpg2
  ./jnlib      Utility functions
  ./kbx        Keybox library
  ./scd        Smartcard daemon
  ./scripts    Scripts needed by configure and others
  ./sm         Gpgsm program


Detailed Roadmap
----------------
g10/gpg.c	Main module with option parsing and all the stuff you have
		to do on startup.  Also has the exout handler and some
		helper functions.
g10/sign.c      Create signature and optionally encrypt

g10/parse-packet.c
g10/build-packet.c
g10/free-packet.c
		Parsing and creating of OpenPGP message packets.

g10/getkey.c    Key selection code
g10/pkclist.c   Build a list of public keys
g10/skclist.c   Build a list of secret keys
g10/ringedit.c  Keyring I/O
g10/keydb.h

g10/keyid.c	Helper functions to get the keyid, fingerprint etc.


g10/trustdb.c    
g10/trustdb.h
g10/tdbdump.c
               Management of the trustdb.gpg

g10/compress.c Filter to handle compression
g10/filter.h   Declarations for all filter functions
g10/delkey.c   Delete a key
g10/kbnode.c   Helper for the KBNODE linked list
g10/main.h     Prototypes and some constants
g10/mainproc.c Message processing
g10/armor.c    Ascii armor filter 
g10/mdfilter.c Filter to calculate hashs
g10/textfilter.c Filter to handle CR/LF and trailing white space
g10/cipher.c   En-/Decryption filter
g10/misc.c     Utlity functions
g10/options.h  Structure with all the command line options
               and related constants
g10/openfile.c Create/Open Files
g10/tdbio.c    I/O handling for the trustdb.gpg
g10/tdbio.h
g10/hkp.h      Keyserver access
g10/hkp.c
g10/packet.h   Defintion of OpenPGP structures.
g10/passphrase.c  Passphrase handling code
g10/pubkey-enc.c  
g10/seckey-cert.c
g10/seskey.c
g10/import.c
g10/export.c
g10/comment.c
g10/status.c
g10/status.h
g10/sign.c
g10/plaintext.c
g10/encr-data.c
g10/encode.c
g10/revoke.c
g10/keylist.c
g10/sig-check.c
g10/signal.c
g10/helptext.c
g10/verify.c
g10/decrypt.c
g10/keyedit.c
g10/dearmor.c
g10/keygen.c



Memory allocation
-----------------
Use only the functions:

    xmalloc
    xmalloc_secure
    xtrymalloc
    xtrymalloc_secure
    xcalloc
    xcalloc_secure
    xtrycalloc
    xtrycalloc_secure
    xrealloc
    xtryrealloc
    xstrdup
    xtrystrdup
    xfree


The *secure versions allocated memory in the secure memory. That is,
swapping out of this memory is avoided and is gets overwritten on
free.  Use this for passphrases, session keys and other sensitive
material.  This memory set aside for secure memory is linited to a few
k.  In general the function don't print a memeory message and
terminate the process if there is not enough memory available.  The
"try" versions of the functions return NULL instead.


Logging
-------






Option parsing
---------------
GNUPG does not use getopt or GNU getopt but functions of it's own.  See
util/argparse.c for details.  The advantage of these functions is that
it is more easy to display and maintain the help texts for the options.
The same option table is also used to parse resource files.



What is an IOBUF
----------------
This is the data structure used for most I/O of gnupg.	It is similar
to System V Streams but much simpler.  Because OpenPGP messages are nested
in different ways; the use of such a system has big advantages.  Here is
an example, how it works:  If the parser sees a packet header with a partial
length, it pushes the block_filter onto the IOBUF to handle these partial
length packets: from now on you don't have to worry about this.  When it sees
a compressed packet it pushes the uncompress filter and the next read byte
is one which has already been uncompressed by this filter. Same goes for
enciphered packet, plaintext packets and so on.  The file g10/encode.c
might be a good staring point to see how it is used  - actually this is
the other way: constructing messages using pushed filters but it may be
easier to understand.


                                                              -*- text -*-
Format of colon listings
========================
First an example:

$ gpg --fixed-list-mode --with-colons --list-keys \
   --with-fingerprint --with-fingerprint wk@gnupg.org

pub:f:1024:17:6C7EE1B8621CC013:899817715:1055898235::m:::scESC:
fpr:::::::::ECAF7590EB3443B5C7CF3ACB6C7EE1B8621CC013:
uid:f::::::::Werner Koch <wk@g10code.com>:
uid:f::::::::Werner Koch <wk@gnupg.org>:
sub:f:1536:16:06AD222CADF6A6E1:919537416:1036177416:::::e:
fpr:::::::::CF8BCC4B18DE08FCD8A1615906AD222CADF6A6E1:
sub:r:1536:20:5CE086B5B5A18FF4:899817788:1025961788:::::esc:
fpr:::::::::AB059359A3B81F410FCFF97F5CE086B5B5A18FF4:

The double --with-fingerprint prints the fingerprint for the subkeys
too. --fixed-list-mode is the modern listing way printing dates in
seconds since Epoch and does not merge the first userID with the pub
record; gpg2 does this by default and the option is a dummy.


 1. Field:  Type of record
	    pub = public key
            crt = X.509 certificate
            crs = X.509 certificate and private key available
	    sub = subkey (secondary key)
	    sec = secret key
	    ssb = secret subkey (secondary key)
	    uid = user id (only field 10 is used).
	    uat = user attribute (same as user id except for field 10).
            sig = signature
            rev = revocation signature
	    fpr = fingerprint: (fingerprint is in field 10)
	    pkd = public key data (special field format, see below)
            grp = reserved for gpgsm
            rvk = revocation key
            tru = trust database information
            spk = signature subpacket

 2. Field:  A letter describing the calculated validity. This is a single
	    letter, but be prepared that additional information may follow
	    in some future versions. (not used for secret keys)
		o = Unknown (this key is new to the system)
                i = The key is invalid (e.g. due to a missing self-signature)
		d = The key has been disabled
		    (deprecated - use the 'D' in field 12 instead)
		r = The key has been revoked
		e = The key has expired
		- = Unknown validity (i.e. no value assigned)
		q = Undefined validity
	            '-' and 'q' may safely be treated as the same
		    value for most purposes
		n = The key is valid
		m = The key is marginal valid.
		f = The key is fully valid
		u = The key is ultimately valid.  This often means
		    that the secret key is available, but any key may
		    be marked as ultimately valid. 

            If the validity information is given for a UID or UAT
            record, it describes the validity calculated based on this
            user ID.  If given for a key record it describes the best
            validity taken from the best rated user ID.

            For X.509 certificates a 'u' is used for a trusted root
            certificate (i.e. for the trust anchor) and an 'f' for all
            other valid certificates.

 3. Field:  length of key in bits.

 4. Field:  Algorithm:	1 = RSA
		       16 = Elgamal (encrypt only)
		       17 = DSA (sometimes called DH, sign only)
		       20 = Elgamal (sign and encrypt - don't use them!)
	    (for other id's see include/cipher.h)

 5. Field:  KeyID

 6. Field:  Creation Date (in UTC).  For UID and UAT records, this is
            the self-signature date.  Note that the date is usally
            printed in seconds since epoch, however, we are migrating
            to an ISO 8601 format (e.g. "19660205T091500").  This is
            currently only relevant for X.509.  A simple way to detect
            the new format is to scan for the 'T'.

 7. Field:  Key or user ID/user attribute expiration date or empty if none.

 8. Field:  Used for serial number in crt records (used to be the Local-ID).
            For UID and UAT records, this is a hash of the user ID contents
            used to represent that exact user ID.  For trust signatures,
            this is the trust depth seperated by the trust value by a
            space.

 9. Field:  Ownertrust (primary public keys only)
	    This is a single letter, but be prepared that additional
	    information may follow in some future versions.  For trust
	    signatures with a regular expression, this is the regular
	    expression value, quoted as in field 10. 

10. Field:  User-ID.  The value is quoted like a C string to avoid
	    control characters (the colon is quoted "\x3a").
            For a "pub" record this field is not used on --fixed-list-mode.
            A UAT record puts the attribute subpacket count here, a
	    space, and then the total attribute subpacket size.
            In gpgsm the issuer name comes here
            An FPR record stores the fingerprint here.
            The fingerprint of an revocation key is stored here.

11. Field:  Signature class as per RFC-4880.  This is a 2 digit
            hexnumber followed by either the letter 'x' for an
            exportable signature or the letter 'l' for a local-only
            signature.  The class byte of an revocation key is also
            given here, 'x' and 'l' is used the same way.  IT is not
            used for X.509.

12. Field:  Key capabilities:
                e = encrypt
                s = sign
                c = certify
                a = authentication
	    A key may have any combination of them in any order.  In
	    addition to these letters, the primary key has uppercase
	    versions of the letters to denote the _usable_
	    capabilities of the entire key, and a potential letter 'D'
	    to indicate a disabled key.

13. Field:  Used in FPR records for S/MIME keys to store the
            fingerprint of the issuer certificate.  This is useful to
            build the certificate path based on certificates stored in
            the local keyDB; it is only filled if the issuer
            certificate is available. The root has been reached if
            this is the same string as the fingerprint. The advantage
            of using this value is that it is guaranteed to have been
            been build by the same lookup algorithm as gpgsm uses.
            For "uid" records this lists the preferences in the same 
            way the gpg's --edit-key menu does.
	    For "sig" records, this is the fingerprint of the key that
	    issued the signature.  Note that this is only filled in if
	    the signature verified correctly.  Note also that for
	    various technical reasons, this fingerprint is only
	    available if --no-sig-cache is used.

14. Field   Flag field used in the --edit menu output:

15. Field   Used in sec/sbb to print the serial number of a token
            (internal protect mode 1002) or a '#' if that key is a
            simple stub (internal protect mode 1001)

All dates are displayed in the format yyyy-mm-dd unless you use the
option --fixed-list-mode in which case they are displayed as seconds
since Epoch.  More fields may be added later, so parsers should be
prepared for this. When parsing a number the parser should stop at the
first non-number character so that additional information can later be
added.

If field 1 has the tag "pkd", a listing looks like this:
pkd:0:1024:B665B1435F4C2 .... FF26ABB:
    !  !   !-- the value
    !  !------ for information number of bits in the value
    !--------- index (eg. DSA goes from 0 to 3: p,q,g,y)


Example for a "tru" trust base record:

   tru:o:0:1166697654:1:3:1:5

 The fields are:

 2: Reason for staleness of trust.  If this field is empty, then the
    trustdb is not stale.  This field may have multiple flags in it:

    o: Trustdb is old
    t: Trustdb was built with a different trust model than the one we
       are using now.

 3: Trust model:
    0: Classic trust model, as used in PGP 2.x.
    1: PGP trust model, as used in PGP 6 and later.  This is the same
       as the classic trust model, except for the addition of trust
       signatures.

    GnuPG before version 1.4 used the classic trust model by default.
    GnuPG 1.4 and later uses the PGP trust model by default.

 4: Date trustdb was created in seconds since 1970-01-01.
 5: Date trustdb will expire in seconds since 1970-01-01.
 6: Number of marginally trusted users to introduce a new key signer
    (gpg's option --marginals-needed)
 7: Number of completely trusted users to introduce a new key signer.
    (gpg's option --completes-needed)
 8: Maximum depth of a certification chain.  
    *gpg's option --max-cert-depth)

The "spk" signature subpacket records have the fields:

 2: Subpacket number as per RFC-4880 and later.
 3: Flags in hex.  Currently the only two bits assigned are 1, to
    indicate that the subpacket came from the hashed part of the
    signature, and 2, to indicate the subpacket was marked critical.
 4: Length of the subpacket.  Note that this is the length of the
    subpacket, and not the length of field 5 below.  Due to the need
    for %-encoding, the length of field 5 may be up to 3x this value.
 5: The subpacket data.  Printable ASCII is shown as ASCII, but other
    values are rendered as %XX where XX is the hex value for the byte.


Format of the "--status-fd" output
==================================
Every line is prefixed with "[GNUPG:] ", followed by a keyword with
the type of the status line and a some arguments depending on the
type (maybe none); an application should always be prepared to see
more arguments in future versions.


    NEWSIG
        May be issued right before a signature verification starts.  This
        is useful to define a context for parsing ERROR status
        messages.  No arguments are currently defined.

    GOODSIG  <long_keyid_or_fpr>  <username>
	The signature with the keyid is good.  For each signature only
        one of the three codes GOODSIG, BADSIG or ERRSIG will be
        emitted and they may be used as a marker for a new signature.
        The username is the primary one encoded in UTF-8 and %XX
        escaped. The fingerprint may be used instead of the long keyid
        if it is available.  This is the case with CMS and might
        eventually also be available for OpenPGP.

    EXPSIG  <long_keyid_or_fpr>  <username>
	The signature with the keyid is good, but the signature is
	expired. The username is the primary one encoded in UTF-8 and
	%XX escaped. The fingerprint may be used instead of the long
	keyid if it is available.  This is the case with CMS and might
	eventually also be available for OpenPGP.

    EXPKEYSIG  <long_keyid_or_fpr> <username> 
        The signature with the keyid is good, but the signature was
	made by an expired key. The username is the primary one
	encoded in UTF-8 and %XX escaped.  The fingerprint may be used
	instead of the long keyid if it is available.  This is the
	case with CMS and might eventually also be available for
	OpenPGP.

    REVKEYSIG  <long_keyid_or_fpr>  <username>
	The signature with the keyid is good, but the signature was
	made by a revoked key. The username is the primary one encoded
	in UTF-8 and %XX escaped. The fingerprint may be used instead
	of the long keyid if it is available.  This is the case with
	CMS and might eventually also be available for OpenPGP.

    BADSIG  <long_keyid_or_fpr>  <username>
	The signature with the keyid has not been verified okay.  The
        username is the primary one encoded in UTF-8 and %XX
        escaped. The fingerprint may be used instead of the long keyid
        if it is available.  This is the case with CMS and might
        eventually also be available for OpenPGP.

    ERRSIG  <long_keyid_or_fpr>  <pubkey_algo> <hash_algo> \
	    <sig_class> <timestamp> <rc>
	It was not possible to check the signature.  This may be
	caused by a missing public key or an unsupported algorithm.  A
	RC of 4 indicates unknown algorithm, a 9 indicates a missing
	public key. The other fields give more information about this
	signature.  sig_class is a 2 byte hex-value.  The fingerprint
	may be used instead of the long keyid if it is available.
	This is the case with CMS and might eventually also be
	available for OpenPGP.

        Note, that TIMESTAMP may either be a number with seconds since
        epoch or an ISO 8601 string which can be detected by the
        presence of the letter 'T' inside.

    VALIDSIG	<fingerprint in hex> <sig_creation_date> <sig-timestamp>
		<expire-timestamp>  <sig-version> <reserved> <pubkey-algo>
		<hash-algo> <sig-class> [ <primary-key-fpr> ]

	The signature with the keyid is good. This is the same as
	GOODSIG but has the fingerprint as the argument. Both status
	lines are emitted for a good signature.  All arguments here
	are on one long line.  sig-timestamp is the signature creation
	time in seconds after the epoch. expire-timestamp is the
	signature expiration time in seconds after the epoch (zero
	means "does not expire"). sig-version, pubkey-algo, hash-algo,
	and sig-class (a 2-byte hex value) are all straight from the
	signature packet.  PRIMARY-KEY-FPR is the fingerprint of the
	primary key or identical to the first argument.  This is
	useful to get back to the primary key without running gpg
	again for this purpose.

        The primary-key-fpr parameter is used for OpenPGP and not
        available for CMS signatures.  The sig-version as well as the
        sig class is not defined for CMS and currently set to 0 and 00.

        Note, that *-TIMESTAMP may either be a number with seconds
        since epoch or an ISO 8601 string which can be detected by the
        presence of the letter 'T' inside.

    SIG_ID  <radix64_string>  <sig_creation_date>  <sig-timestamp>
	This is emitted only for signatures of class 0 or 1 which
	have been verified okay.  The string is a signature id
	and may be used in applications to detect replay attacks
	of signed messages.  Note that only DLP algorithms give
	unique ids - others may yield duplicated ones when they
	have been created in the same second.

        Note, that SIG-TIMESTAMP may either be a number with seconds
        since epoch or an ISO 8601 string which can be detected by the
        presence of the letter 'T' inside.

    ENC_TO  <long_keyid>  <keytype>  <keylength>
	The message is encrypted to this LONG_KEYID.  KEYTYPE is the
	numerical value of the public key algorithm or 0 if it is not
	known, KEYLENGTH is the length of the key or 0 if it is not
	known (which is currently always the case).  Gpg prints this
	line always; Gpgsm only if it knows the certificate.

    NODATA  <what>
	No data has been found. Codes for what are:
	    1 - No armored data.
	    2 - Expected a packet but did not found one.
	    3 - Invalid packet found, this may indicate a non OpenPGP
                message.
            4 - signature expected but not found
	You may see more than one of these status lines.

    UNEXPECTED <what>
        Unexpected data has been encountered
            0 - not further specified               1       
  

    TRUST_UNDEFINED <error token>
    TRUST_NEVER     <error token>
    TRUST_MARGINAL  [0  [<validation_model>]]
    TRUST_FULLY     [0  [<validation_model>]] 
    TRUST_ULTIMATE  [0  [<validation_model>]]
	For good signatures one of these status lines are emitted to
	indicate the validity of the key used to create the signature.
	The error token values are currently only emitted by gpgsm.
	VALIDATION_MODEL describes the algorithm used to check the
	validity of the key.  The defaults are the standard Web of
	Trust model for gpg and the the standard X.509 model for
	gpgsm.  The defined values are

           "pgp"   for the standard PGP WoT.
	   "shell" for the standard X.509 model.
	   "chain" for the chain model.

        Note that we use the term "TRUST_" in the status names for
        historic reasons; we now speak of validity.

    PKA_TRUST_GOOD <mailbox>
    PKA_TRUST_BAD  <mailbox>
        Depending on the outcome of the PKA check one of the above
        status codes is emitted in addition to a TRUST_* status.
        Without PKA info available or 

    SIGEXPIRED
	This is deprecated in favor of KEYEXPIRED.

    KEYEXPIRED <expire-timestamp>
	The key has expired.  expire-timestamp is the expiration time
	in seconds since Epoch.  This status line is not very useful
	because it will also be emitted for expired subkeys even if
	this subkey is not used.  To check whether a key used to sign
	a message has expired, the EXPKEYSIG status line is to be
	used.

        Note, that TIMESTAMP may either be a number with seconds since
        epoch or an ISO 8601 string which can be detected by the
        presence of the letter 'T' inside.

    KEYREVOKED
	The used key has been revoked by its owner.  No arguments yet.

    BADARMOR
	The ASCII armor is corrupted.  No arguments yet.

    RSA_OR_IDEA
	The IDEA algorithms has been used in the data.  A
	program might want to fallback to another program to handle
	the data if GnuPG failed.  This status message used to be emitted
        also for RSA but this has been dropped after the RSA patent expired.
        However we can't change the name of the message.

    SHM_INFO
    SHM_GET
    SHM_GET_BOOL
    SHM_GET_HIDDEN

    GET_BOOL
    GET_LINE
    GET_HIDDEN
    GOT_IT

    NEED_PASSPHRASE <long main keyid> <long keyid> <keytype> <keylength>
	Issued whenever a passphrase is needed.
	keytype is the numerical value of the public key algorithm
	or 0 if this is not applicable, keylength is the length
	of the key or 0 if it is not known (this is currently always the case).

    NEED_PASSPHRASE_SYM <cipher_algo> <s2k_mode> <s2k_hash>
	Issued whenever a passphrase for symmetric encryption is needed.

    NEED_PASSPHRASE_PIN <card_type> <chvno> [<serialno>]
        Issued whenever a PIN is requested to unlock a card.

    MISSING_PASSPHRASE
	No passphrase was supplied.  An application which encounters this
	message may want to stop parsing immediately because the next message
	will probably be a BAD_PASSPHRASE.  However, if the application
	is a wrapper around the key edit menu functionality it might not
	make sense to stop parsing but simply ignoring the following
	BAD_PASSPHRASE.

    BAD_PASSPHRASE <long keyid>
	The supplied passphrase was wrong or not given.  In the latter case
	you may have seen a MISSING_PASSPHRASE.

    GOOD_PASSPHRASE
	The supplied passphrase was good and the secret key material
	is therefore usable.

    DECRYPTION_FAILED
	The symmetric decryption failed - one reason could be a wrong
	passphrase for a symmetrical encrypted message.

    DECRYPTION_OKAY
	The decryption process succeeded.  This means, that either the
	correct secret key has been used or the correct passphrase
	for a conventional encrypted message was given.  The program
	itself may return an errorcode because it may not be possible to
	verify a signature for some reasons.

    NO_PUBKEY  <long keyid>
    NO_SECKEY  <long keyid>
	The key is not available

    IMPORT_CHECK <long keyid> <fingerprint> <user ID>
        This status is emitted in interactive mode right before
        the "import.okay" prompt.

    IMPORTED   <long keyid>  <username>
	The keyid and name of the signature just imported

    IMPORT_OK  <reason> [<fingerprint>]
        The key with the primary key's FINGERPRINT has been imported.
        Reason flags:
          0 := Not actually changed
          1 := Entirely new key.
          2 := New user IDs
          4 := New signatures
          8 := New subkeys 
         16 := Contains private key.
        The flags may be ORed.

    IMPORT_PROBLEM <reason> [<fingerprint>]
        Issued for each import failure.  Reason codes are:
          0 := "No specific reason given".
          1 := "Invalid Certificate".
          2 := "Issuer Certificate missing".
          3 := "Certificate Chain too long".
          4 := "Error storing certificate".

    IMPORT_RES <count> <no_user_id> <imported> <imported_rsa> <unchanged>
	<n_uids> <n_subk> <n_sigs> <n_revoc> <sec_read> <sec_imported> <sec_dups> <not_imported>
	Final statistics on import process (this is one long line)

    FILE_START <what> <filename>
	Start processing a file <filename>.  <what> indicates the performed
	operation:
	    1 - verify
            2 - encrypt
            3 - decrypt        

    FILE_DONE
	Marks the end of a file processing which has been started
	by FILE_START.

    BEGIN_DECRYPTION
    END_DECRYPTION
	Mark the start and end of the actual decryption process.  These
	are also emitted when in --list-only mode.

    BEGIN_ENCRYPTION  <mdc_method> <sym_algo>
    END_ENCRYPTION
	Mark the start and end of the actual encryption process.

    BEGIN_SIGNING
       Mark the start of the actual signing process. This may be used
       as an indication that all requested secret keys are ready for
       use.

    DELETE_PROBLEM reason_code
	Deleting a key failed.	Reason codes are:
	    1 - No such key
	    2 - Must delete secret key first
            3 - Ambigious specification

    PROGRESS what char cur total
	Used by the primegen and Public key functions to indicate progress.
	"char" is the character displayed with no --status-fd enabled, with
	the linefeed replaced by an 'X'.  "cur" is the current amount
	done and "total" is amount to be done; a "total" of 0 indicates that
	the total amount is not known.	The condition 
           TOATL && CUR == TOTAL
        may be used to detect the end of an operation.
        Well known values for WHAT:
             "pk_dsa"   - DSA key generation
             "pk_elg"   - Elgamal key generation
             "primegen" - Prime generation
             "need_entropy" - Waiting for new entropy in the RNG
             "file:XXX" - processing file XXX
                          (note that current gpg versions leave out the
                           "file:" prefix).
             "tick"     - generic tick without any special meaning - useful
                          for letting clients know that the server is
                          still working.
             "starting_agent" - A gpg-agent was started because it is not
                          running as a daemon.
             "learncard"  Send by the agent and gpgsm while learing
	                  the data of a smartcard.
             "card_busy"  A smartcard is still working
        
    SIG_CREATED <type> <pubkey algo> <hash algo> <class> <timestamp> <key fpr>
	A signature has been created using these parameters.
	    type:  'D' = detached
		   'C' = cleartext
		   'S' = standard
		   (only the first character should be checked)
	    class: 2 hex digits with the signature class

        Note, that TIMESTAMP may either be a number with seconds since
        epoch or an ISO 8601 string which can be detected by the
        presence of the letter 'T' inside.
        
    KEY_CREATED <type> <fingerprint> [<handle>]
        A key has been created
            type: 'B' = primary and subkey
                  'P' = primary
                  'S' = subkey
        The fingerprint is one of the primary key for type B and P and
        the one of the subkey for S.  Handle is an arbitrary
        non-whitespace string used to match key parameters from batch
        key creation run.

    KEY_NOT_CREATED [<handle>]
        The key from batch run has not been created due to errors.


    SESSION_KEY  <algo>:<hexdigits>
	The session key used to decrypt the message.  This message will
	only be emitted when the special option --show-session-key
	is used.  The format is suitable to be passed to the option
	--override-session-key

    NOTATION_NAME <name> 
    NOTATION_DATA <string>
        name and string are %XX escaped; the data may be split
        among several NOTATION_DATA lines.

    USERID_HINT <long main keyid> <string>
        Give a hint about the user ID for a certain keyID. 

    POLICY_URL <string>
        string is %XX escaped

    BEGIN_STREAM
    END_STREAM
        Issued by pipemode.

    INV_RECP <reason> <requested_recipient>
    INV_SGNR <reason> <requested_sender>
        Issued for each unusable recipient/sender. The reasons codes
        currently in use are:
          0 := "No specific reason given".
          1 := "Not Found"
          2 := "Ambigious specification"
          3 := "Wrong key usage"
          4 := "Key revoked"
          5 := "Key expired"
          6 := "No CRL known"
          7 := "CRL too old"
          8 := "Policy mismatch"
          9 := "Not a secret key"
	 10 := "Key not trusted"
         11 := "Missing certificate"  (e.g. intermediate or root cert.)

        Note that for historical reasons the INV_RECP status is also
        used for gpgsm's SIGNER command where it relates to signer's
        of course.  Newer GnuPG versions are using INV_SGNR;
        applications should ignore the INV_RECP during the sender's
        command processing once they have seen an INV_SGNR.  We use
        different code so that we can distinguish them while doing an
        encrypt+sign.


    NO_RECP <reserved>
    NO_SGNR <reserved>
        Issued when no recipients/senders are usable.

    ALREADY_SIGNED <long-keyid>
        Warning: This is experimental and might be removed at any time.

    TRUNCATED <maxno>
        The output was truncated to MAXNO items.  This status code is issued
        for certain external requests

    ERROR <error location> <error code> [<more>]

        This is a generic error status message, it might be followed
        by error location specific data. <error code> and
        <error_location> should not contain spaces.  The error code is
        a either a string commencing with a letter or such a string
        prefixed with a numerical error code and an underscore; e.g.:
        "151011327_EOF".

    ATTRIBUTE <fpr> <octets> <type> <index> <count>
	      <timestamp> <expiredate> <flags>
	This is one long line issued for each attribute subpacket when
	an attribute packet is seen during key listing.  <fpr> is the
	fingerprint of the key. <octets> is the length of the
	attribute subpacket. <type> is the attribute type
	(1==image). <index>/<count> indicates that this is the Nth
	indexed subpacket of count total subpackets in this attribute
	packet.  <timestamp> and <expiredate> are from the
	self-signature on the attribute packet.  If the attribute
	packet does not have a valid self-signature, then the
	timestamp is 0.  <flags> are a bitwise OR of:
		0x01 = this attribute packet is a primary uid
		0x02 = this attribute packet is revoked
		0x04 = this attribute packet is expired

    CARDCTRL <what> [<serialno>]
        This is used to control smartcard operations.
        Defined values for WHAT are:
           1 = Request insertion of a card.  Serialnumber may be given
               to request a specific card.  Used by gpg 1.4 w/o scdaemon.
           2 = Request removal of a card.  Used by gpg 1.4 w/o scdaemon.
           3 = Card with serialnumber detected
           4 = No card available.
           5 = No card reader available
           6 = No card support available                      

    PLAINTEXT <format> <timestamp> <filename>
        This indicates the format of the plaintext that is about to be
        written.  The format is a 1 byte hex code that shows the
        format of the plaintext: 62 ('b') is binary data, 74 ('t') is
        text data with no character set specified, and 75 ('u') is
        text data encoded in the UTF-8 character set.  The timestamp
        is in seconds since the epoch.  If a filename is available it
        gets printed as the third argument, percent-escaped as usual.

    PLAINTEXT_LENGTH <length>
        This indicates the length of the plaintext that is about to be
        written.  Note that if the plaintext packet has partial length
        encoding it is not possible to know the length ahead of time.
        In that case, this status tag does not appear.

    SIG_SUBPACKET <type> <flags> <len> <data>
        This indicates that a signature subpacket was seen.  The
        format is the same as the "spk" record above.

    SC_OP_FAILURE [<code>]
        An operation on a smartcard definitely failed.  Currently
        there is no indication of the actual error code, but
        application should be prepared to later accept more arguments.
        Defined values for CODE are:
           0 - unspecified error (identically to a missing CODE)
           1 - canceled
           2 - bad PIN

    SC_OP_SUCCESS
        A smart card operaion succeeded.  This status is only printed
        for certain operation and is mostly useful to check whether a
        PIN change really worked.

    BACKUP_KEY_CREATED fingerprint fname
        A backup key named FNAME has been created for the key with
        KEYID.



Format of the "--attribute-fd" output
=====================================

When --attribute-fd is set, during key listings (--list-keys,
--list-secret-keys) GnuPG dumps each attribute packet to the file
descriptor specified.  --attribute-fd is intended for use with
--status-fd as part of the required information is carried on the
ATTRIBUTE status tag (see above).

The contents of the attribute data is specified by RFC 4880.  For
convenience, here is the Photo ID format, as it is currently the only
attribute defined:

   Byte 0-1:  The length of the image header.  Due to a historical
              accident (i.e. oops!) back in the NAI PGP days, this is
              a little-endian number.  Currently 16 (0x10 0x00).

   Byte 2:    The image header version.  Currently 0x01.

   Byte 3:    Encoding format.  0x01 == JPEG.

   Byte 4-15: Reserved, and currently unused.

   All other data after this header is raw image (JPEG) data.


Format of the "--list-config" output
====================================

--list-config outputs information about the GnuPG configuration for
the benefit of frontends or other programs that call GnuPG.  There are
several list-config items, all colon delimited like the rest of the
--with-colons output.  The first field is always "cfg" to indicate
configuration information.  The second field is one of (with
examples):

version: the third field contains the version of GnuPG.

   cfg:version:1.3.5

pubkey: the third field contains the public key algorithmdcaiphers
	this version of GnuPG supports, separated by semicolons.  The
	algorithm numbers are as specified in RFC-4880.

   cfg:pubkey:1;2;3;16;17

cipher: the third field contains the symmetric ciphers this version of
	GnuPG supports, separated by semicolons.  The cipher numbers
	are as specified in RFC-4880.

   cfg:cipher:2;3;4;7;8;9;10

digest: the third field contains the digest (hash) algorithms this
	version of GnuPG supports, separated by semicolons.  The
	digest numbers are as specified in RFC-4880.

   cfg:digest:1;2;3;8;9;10

compress: the third field contains the compression algorithms this
	  version of GnuPG supports, separated by semicolons.  The
	  algorithm numbers are as specified in RFC-4880.

   cfg:compress:0;1;2;3

group: the third field contains the name of the group, and the fourth
       field contains the values that the group expands to, separated
       by semicolons.

For example, a group of:
   group mynames = paige 0x12345678 joe patti

would result in:
   cfg:group:mynames:patti;joe;0x12345678;paige


Key generation
==============
    See the Libcrypt manual.


Unattended key generation
=========================
This feature allows unattended generation of keys controlled by a
parameter file.  To use this feature, you use --gen-key together with
--batch and feed the parameters either from stdin or from a file given
on the commandline.

The format of this file is as follows:
  o Text only, line length is limited to about 1000 chars.
  o You must use UTF-8 encoding to specify non-ascii characters.
  o Empty lines are ignored.
  o Leading and trailing spaces are ignored.
  o A hash sign as the first non white space character indicates a comment line.
  o Control statements are indicated by a leading percent sign, the
    arguments are separated by white space from the keyword.
  o Parameters are specified by a keyword, followed by a colon.  Arguments
    are separated by white space.
  o The first parameter must be "Key-Type", control statements
    may be placed anywhere.
  o Key generation takes place when either the end of the parameter file
    is reached, the next "Key-Type" parameter is encountered or at the
    control statement "%commit"
  o Control statements:
    %echo <text>
	Print <text>.
    %dry-run
	Suppress actual key generation (useful for syntax checking).
    %commit
	Perform the key generation.  An implicit commit is done
	at the next "Key-Type" parameter.
    %pubring <filename>
    %secring <filename>
	Do not write the key to the default or commandline given
	keyring but to <filename>.  This must be given before the first
	commit to take place, duplicate specification of the same filename
	is ignored, the last filename before a commit is used.
	The filename is used until a new filename is used (at commit points)
	and all keys are written to that file.	If a new filename is given,
	this file is created (and overwrites an existing one).
	Both control statements must be given.
    %ask-passphrase
        Enable a mode where the command "passphrase" is ignored and
        instead the usual passphrase dialog is used.  This does not
        make sense for batch key generation; however the unattended
        key generation feature is also used by GUIs and this feature
        relinquishes the GUI from implementing its own passphrase
        entry code.  This is a global option.
    %no-ask-passphrase
        Disable the ask-passphrase mode.        

   o The order of the parameters does not matter except for "Key-Type"
     which must be the first parameter.  The parameters are only for the
     generated keyblock and parameters from previous key generations are not
     used. Some syntactically checks may be performed.
     The currently defined parameters are:
     Key-Type: <algo-number>|<algo-string>
	Starts a new parameter block by giving the type of the primary
	key. The algorithm must be capable of signing.  This is a
	required parameter.  It may be "default" to use the default
	one; in this case don't give a Key-Usage and use "default" for
	the Subkey-Type.
     Key-Length: <length-in-bits>
	Length of the key in bits.  The default is returned by running
        the command "gpg --gpgconf-list".
     Key-Usage: <usage-list>
        Space or comma delimited list of key usage, allowed values are
        "encrypt", "sign", and "auth".  This is used to generate the
        key flags.  Please make sure that the algorithm is capable of
        this usage.  Note that OpenPGP requires that all primary keys
        are capable of certification, so no matter what usage is given
        here, the "cert" flag will be on.  If no Key-Usage is
        specified and the key-type is not "default", all allowed
        usages for that particular algorithm are used; if it is not
        given but "default" is used the usage will be "sign".
     Subkey-Type: <algo-number>|<algo-string>
	This generates a secondary key.  Currently only one subkey
	can be handled.  "default" is also supported.
     Subkey-Length: <length-in-bits>
	Length of the subkey in bits.  The default is returned by running
        the command "gpg --gpgconf-list".
     Subkey-Usage: <usage-list>
        Similar to Key-Usage.
     Passphrase: <string>
	If you want to specify a passphrase for the secret key,
	enter it here.	Default is not to use any passphrase.
     Name-Real: <string>
     Name-Comment: <string>
     Name-Email: <string>
	The 3 parts of a key. Remember to use UTF-8 here.
	If you don't give any of them, no user ID is created.
     Expire-Date: <iso-date>|(<number>[d|w|m|y])
	Set the expiration date for the key (and the subkey).  It may
	either be entered in ISO date format (2000-08-15) or as number
	of days, weeks, month or years.  The special notation
	"seconds=N" is also allowed to directly give an Epoch
	value. Without a letter days are assumed.  Note that there is
	no check done on the overflow of the type used by OpenPGP for
	timestamps.  Thus you better make sure that the given value
	make sense.  Although OpenPGP works with time intervals, GnuPG
	uses an absolute value internally and thus the last year we
	can represent is 2105.
     Creation-Date: <iso-date>
        Set the creation date of the key as stored in the key
        information and which is also part of the fingerprint
        calculation.  Either a date like "1986-04-26" or a full
        timestamp like "19860426T042640" may be used.  The time is
        considered to be UTC.  If it is not given the current time 
        is used.
     Preferences: <string>
        Set the cipher, hash, and compression preference values for
	this key.  This expects the same type of string as "setpref"
	in the --edit menu.
     Revoker: <algo>:<fpr> [sensitive]
        Add a designated revoker to the generated key.  Algo is the
	public key algorithm of the designated revoker (i.e. RSA=1,
	DSA=17, etc.)  Fpr is the fingerprint of the designated
	revoker.  The optional "sensitive" flag marks the designated
	revoker as sensitive information.  Only v4 keys may be
	designated revokers.
     Handle: <string>
        This is an optional parameter only used with the status lines
        KEY_CREATED and KEY_NOT_CREATED.  STRING may be up to 100
        characters and should not contain spaces.  It is useful for
        batch key generation to associate a key parameter block with a
        status line.
     Keyserver: <string>
        This is an optional parameter that specifies the preferred
        keyserver URL for the key.


Here is an example on how to create a key:
$ cat >foo <<EOF
     %echo Generating a basic OpenPGP key
     Key-Type: DSA
     Key-Length: 1024
     Subkey-Type: ELG-E
     Subkey-Length: 1024
     Name-Real: Joe Tester
     Name-Comment: with stupid passphrase
     Name-Email: joe@foo.bar
     Expire-Date: 0
     Passphrase: abc
     %pubring foo.pub
     %secring foo.sec
     # Do a commit here, so that we can later print "done" :-)
     %commit
     %echo done
EOF
$ gpg --batch --gen-key foo
 [...]
$ gpg --no-default-keyring --secret-keyring ./foo.sec \
				  --keyring ./foo.pub --list-secret-keys
/home/wk/work/gnupg-stable/scratch/foo.sec
------------------------------------------
sec  1024D/915A878D 2000-03-09 Joe Tester (with stupid passphrase) <joe@foo.bar>
ssb  1024g/8F70E2C0 2000-03-09

If you want to create a key with the default algorithms you would
use these parameters:

     %echo Generating a default key
     Key-Type: default
     Subkey-Type: default
     Name-Real: Joe Tester
     Name-Comment: with stupid passphrase
     Name-Email: joe@foo.bar
     Expire-Date: 0
     Passphrase: abc
     %pubring foo.pub
     %secring foo.sec
     # Do a commit here, so that we can later print "done" :-)
     %commit
     %echo done




Layout of the TrustDB
=====================
The TrustDB is built from fixed length records, where the first byte
describes the record type.  All numeric values are stored in network
byte order. The length of each record is 40 bytes. The first record of
the DB is always of type 1 and this is the only record of this type.

FIXME:  The layout changed, document it here.

  Record type 0:
  --------------
    Unused record, can be reused for any purpose.

  Record type 1:
  --------------
    Version information for this TrustDB.  This is always the first
    record of the DB and the only one with type 1.
     1 byte value 1
     3 bytes 'gpg'  magic value
     1 byte Version of the TrustDB (2)
     1 byte marginals needed
     1 byte completes needed
     1 byte max_cert_depth
	    The three items are used to check whether the cached
	    validity value from the dir record can be used.
     1 u32  locked flags [not used]
     1 u32  timestamp of trustdb creation
     1 u32  timestamp of last modification which may affect the validity
	    of keys in the trustdb.  This value is checked against the
	    validity timestamp in the dir records.
     1 u32  timestamp of last validation [currently not used]
	    (Used to keep track of the time, when this TrustDB was checked
	     against the pubring)
     1 u32  record number of keyhashtable [currently not used]
     1 u32  first free record
     1 u32  record number of shadow directory hash table [currently not used]
	    It does not make sense to combine this table with the key table
	    because the keyid is not in every case a part of the fingerprint.
     1 u32  record number of the trusthashtbale


  Record type 2: (directory record)
  --------------
    Informations about a public key certificate.
    These are static values which are never changed without user interaction.

     1 byte value 2
     1 byte  reserved
     1 u32   LID     .	(This is simply the record number of this record.)
     1 u32   List of key-records (the first one is the primary key)
     1 u32   List of uid-records
     1 u32   cache record
     1 byte  ownertrust
     1 byte  dirflag
     1 byte  maximum validity of all the user ids
     1 u32   time of last validity check.
     1 u32   Must check when this time has been reached.
	     (0 = no check required)


  Record type 3:  (key record)
  --------------
    Informations about a primary public key.
    (This is mainly used to lookup a trust record)

     1 byte value 3
     1 byte  reserved
     1 u32   LID
     1 u32   next   - next key record
     7 bytes reserved
     1 byte  keyflags
     1 byte  pubkey algorithm
     1 byte  length of the fingerprint (in bytes)
     20 bytes fingerprint of the public key
	      (This is the value we use to identify a key)

  Record type 4: (uid record)
  --------------
    Informations about a userid
    We do not store the userid but the hash value of the userid because that
    is sufficient.

     1 byte value 4
     1 byte reserved
     1 u32  LID  points to the directory record.
     1 u32  next   next userid
     1 u32  pointer to preference record
     1 u32  siglist  list of valid signatures
     1 byte uidflags
     1 byte validity of the key calculated over this user id
     20 bytes ripemd160 hash of the username.


  Record type 5: (pref record)
  --------------
    This record type is not anymore used.

     1 byte value 5
     1 byte   reserved
     1 u32  LID; points to the directory record (and not to the uid record!).
	    (or 0 for standard preference record)
     1 u32  next
     30 byte preference data

  Record type 6  (sigrec)
  -------------
    Used to keep track of key signatures. Self-signatures are not
    stored.  If a public key is not in the DB, the signature points to
    a shadow dir record, which in turn has a list of records which
    might be interested in this key (and the signature record here
    is one).

     1 byte   value 6
     1 byte   reserved
     1 u32    LID	    points back to the dir record
     1 u32    next   next sigrec of this uid or 0 to indicate the
		     last sigrec.
     6 times
	1 u32  Local_id of signatures dir or shadow dir record
	1 byte Flag: Bit 0 = checked: Bit 1 is valid (we have a real
			     directory record for this)
			 1 = valid is set (but may be revoked)



  Record type 8: (shadow directory record)
  --------------
    This record is used to reserve a LID for a public key.  We
    need this to create the sig records of other keys, even if we
    do not yet have the public key of the signature.
    This record (the record number to be more precise) will be reused
    as the dir record when we import the real public key.

     1 byte value 8
     1 byte  reserved
     1 u32   LID      (This is simply the record number of this record.)
     2 u32   keyid
     1 byte  pubkey algorithm
     3 byte reserved
     1 u32   hintlist	A list of records which have references to
			this key.  This is used for fast access to
			signature records which are not yet checked.
			Note, that this is only a hint and the actual records
			may not anymore hold signature records for that key
			but that the code cares about this.
    18 byte reserved



  Record Type 10 (hash table)
  --------------
    Due to the fact that we use fingerprints to lookup keys, we can
    implement quick access by some simple hash methods, and avoid
    the overhead of gdbm.  A property of fingerprints is that they can be
    used directly as hash values.  (They can be considered as strong
    random numbers.)
      What we use is a dynamic multilevel architecture, which combines
    hashtables, record lists, and linked lists.

    This record is a hashtable of 256 entries; a special property
    is that all these records are stored consecutively to make one
    big table. The hash value is simple the 1st, 2nd, ... byte of
    the fingerprint (depending on the indirection level).

    When used to hash shadow directory records, a different table is used
    and indexed by the keyid.

     1 byte value 10
     1 byte reserved
     n u32  recnum; n depends on the record length:
	    n = (reclen-2)/4  which yields 9 for the current record length
	    of 40 bytes.

    the total number of such record which makes up the table is:
	 m = (256+n-1) / n
    which is 29 for a record length of 40.

    To look up a key we use the first byte of the fingerprint to get
    the recnum from this hashtable and look up the addressed record:
       - If this record is another hashtable, we use 2nd byte
	 to index this hash table and so on.
       - if this record is a hashlist, we walk all entries
	 until we found one a matching one.
       - if this record is a key record, we compare the
	 fingerprint and to decide whether it is the requested key;


  Record type 11 (hash list)
  --------------
    see hash table for an explanation.
    This is also used for other purposes.

    1 byte value 11
    1 byte reserved
    1 u32  next 	 next hash list record
    n times		 n = (reclen-5)/5
	1 u32  recnum

    For the current record length of 40, n is 7



  Record type 254 (free record)
  ---------------
    All these records form a linked list of unused records.
     1 byte  value 254
     1 byte  reserved (0)
     1 u32   next_free



GNU extensions to the S2K algorithm
===================================
S2K mode 101 is used to identify these extensions.
After the hash algorithm the 3 bytes "GNU" are used to make
clear that these are extensions for GNU, the next bytes gives the
GNU protection mode - 1000.  Defined modes are:
  1001 - do not store the secret part at all
  1002 - a stub to access smartcards (not used in 1.2.x)



Other Notes
===========
    * For packet version 3 we calculate the keyids this way:
	RSA	:= low 64 bits of n
	ELGAMAL := build a v3 pubkey packet (with CTB 0x99) and calculate
		   a rmd160 hash value from it. This is used as the
		   fingerprint and the low 64 bits are the keyid.

    * Revocation certificates consist only of the signature packet;
      "import" knows how to handle this.  The rationale behind it is
      to keep them small.


OIDs below the GnuPG arc:
=========================

 1.3.6.1.4.1.11591.2          GnuPG 
 1.3.6.1.4.1.11591.2.1          notation
 1.3.6.1.4.1.11591.2.1.1          pkaAddress
 1.3.6.1.4.1.11591.2.12242973   invalid encoded OID



Keyserver Message Format
=========================

The keyserver may be contacted by a Unix Domain socket or via TCP.

The format of a request is:

====
command-tag
"Content-length:" digits
CRLF
=======

Where command-tag is

NOOP
GET <user-name>
PUT
DELETE <user-name>


The format of a response is:

======
"GNUPG/1.0" status-code status-text
"Content-length:" digits
CRLF
============
followed by <digits> bytes of data


Status codes are:

     o	1xx: Informational - Request received, continuing process

     o	2xx: Success - The action was successfully received, understood,
	and accepted

     o	4xx: Client Error - The request contains bad syntax or cannot be
	fulfilled

     o	5xx: Server Error - The server failed to fulfill an apparently
	valid request



Documentation on HKP (the http keyserver protocol):

A minimalistic HTTP server on port 11371 recognizes a GET for /pks/lookup.
The standard http URL encoded query parameters are this (always key=value):

- op=index (like pgp -kv), op=vindex (like pgp -kvv) and op=get (like
  pgp -kxa)

- search=<stringlist>. This is a list of words that must occur in the key.
  The words are delimited with space, points, @ and so on. The delimiters
  are not searched for and the order of the words doesn't matter (but see
  next option).

- exact=on. This switch tells the hkp server to only report exact matching
  keys back. In this case the order and the "delimiters" are important.

- fingerprint=on. Also reports the fingerprints when used with 'index' or
  'vindex'

The keyserver also recognizes http-POSTs to /pks/add. Use this to upload
keys.


A better way to do this would be a request like:

   /pks/lookup/<gnupg_formatierte_user_id>?op=<operation>

This can be implemented using Hurd's translator mechanism.
However, I think the whole key server stuff has to be re-thought;
I have some ideas and probably create a white paper.

@c Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
@c               2008, 2009 Free Software Foundation, Inc.
@c This is part of the GnuPG manual.
@c For copying conditions, see the file gnupg.texi.

@node Invoking GPG
@chapter Invoking GPG
@cindex GPG command options
@cindex command options
@cindex options, GPG command

@c Begin GnuPG 1.x specific stuff
@ifset gpgone
@macro gpgname
gpg
@end macro
@manpage gpg.1
@ifset manverb
.B gpg
\- OpenPGP encryption and signing tool
@end ifset

@mansect synopsis
@ifset manverb
.B  gpg
.RB [ \-\-homedir
.IR dir ]
.RB [ \-\-options
.IR file ]
.RI [ options ]  
.I command
.RI [ args ]
@end ifset
@end ifset
@c End GnuPG 1.x specific stuff

@c Begin GnuPG 2 specific stuff
@ifclear gpgone
@macro gpgname
gpg2
@end macro
@manpage gpg2.1
@ifset manverb
.B gpg2
\- OpenPGP encryption and signing tool
@end ifset

@mansect synopsis
@ifset manverb
.B  gpg2
.RB [ \-\-homedir
.IR dir ]
.RB [ \-\-options
.IR file ]
.RI [ options ]  
.I command
.RI [ args ]
@end ifset
@end ifclear
@c Begin GnuPG 2 specific stuff

@mansect description
@command{@gpgname} is the OpenPGP part of the GNU Privacy Guard (GnuPG). It
is a tool to provide digital encryption and signing services using the
OpenPGP standard. @command{@gpgname} features complete key management and
all bells and whistles you can expect from a decent OpenPGP
implementation.

@ifset gpgone
This is the standalone version of @command{gpg}.  For desktop use you
should consider using @command{gpg2}.
@end ifset

@ifclear gpgone
In contrast to the standalone version @command{gpg}, which is more
suited for server and embedded platforms, this version is installed
under the name @command{gpg2} and more targeted to the desktop as it
requires several other modules to be installed.  The standalone version
will be kept maintained and it is possible to install both versions on
the same system.  If you need to use different configuration files, you
should make use of something like @file{gpg.conf-2} instead of just
@file{gpg.conf}.
@end ifclear

@manpause
@ifclear gpgone
Documentation for the old standard @command{gpg} is available as a man
page and at @inforef{Top,GnuPG 1,gpg}.
@end ifclear

@xref{Option Index}, for an index to @command{@gpgname}'s commands and options.
@mancont

@menu
* GPG Commands::        List of all commands.
* GPG Options::         List of all options.
* GPG Configuration::   Configuration files.
* GPG Examples::        Some usage examples.

Developer information:
@c * Unattended Usage::      Using @command{gpg} from other programs.
@c * GPG Protocol::        The protocol the server mode uses.
@end menu



@c *******************************************
@c ***************            ****************
@c ***************  COMMANDS  ****************
@c ***************            ****************
@c *******************************************
@mansect commands
@node GPG Commands
@section Commands

Commands are not distinguished from options except for the fact that
only one command is allowed.

@command{@gpgname} may be run with no commands, in which case it will
perform a reasonable action depending on the type of file it is given
as input (an encrypted message is decrypted, a signature is verified,
a file containing keys is listed).

Please remember that option as well as command parsing stops as soon as
a non-option is encountered, you can explicitly stop parsing by
using the special option @option{--}.


@menu
* General GPG Commands::        Commands not specific to the functionality.
* Operational GPG Commands::    Commands to select the type of operation.
* OpenPGP Key Management::      How to manage your keys.
@end menu


@c *******************************************
@c **********  GENERAL COMMANDS  *************
@c *******************************************
@node General GPG Commands
@subsection Commands not specific to the function

@table @gnupgtabopt
@item --version
@opindex version
Print the program version and licensing information.  Note that you
cannot abbreviate this command.

@item --help
@itemx -h
@opindex help
Print a usage message summarizing the most useful command line options.
Note that you cannot abbreviate this command.

@item --warranty
@opindex warranty
Print warranty information.

@item --dump-options
@opindex dump-options
Print a list of all available options and commands.  Note that you cannot
abbreviate this command.
@end table


@c *******************************************
@c ********  OPERATIONAL COMMANDS  ***********
@c *******************************************
@node Operational GPG Commands
@subsection Commands to select the type of operation


@table @gnupgtabopt

@item --sign
@itemx -s
@opindex sign
Make a signature. This command may be combined with @option{--encrypt}
(for a signed and encrypted message), @option{--symmetric} (for a
signed and symmetrically encrypted message), or @option{--encrypt} and
@option{--symmetric} together (for a signed message that may be
decrypted via a secret key or a passphrase).  The key to be used for
signing is chosen by default or can be set with the
@option{--local-user} and @option{--default-key} options.

@item --clearsign
@opindex clearsign
Make a clear text signature.  The content in a clear text signature is
readable without any special software. OpenPGP software is only needed
to verify the signature.  Clear text signatures may modify end-of-line
whitespace for platform independence and are not intended to be
reversible.  The key to be used for signing is chosen by default or
can be set with the @option{--local-user} and @option{--default-key}
options.


@item --detach-sign
@itemx -b
@opindex detach-sign
Make a detached signature.

@item --encrypt
@itemx -e
@opindex encrypt
Encrypt data. This option may be combined with @option{--sign} (for a
signed and encrypted message), @option{--symmetric} (for a message that
may be decrypted via a secret key or a passphrase), or @option{--sign}
and @option{--symmetric} together (for a signed message that may be
decrypted via a secret key or a passphrase).

@item --symmetric
@itemx -c
@opindex symmetric
Encrypt with a symmetric cipher using a passphrase. The default
symmetric cipher used is CAST5, but may be chosen with the
@option{--cipher-algo} option. This option may be combined with
@option{--sign} (for a signed and symmetrically encrypted message),
@option{--encrypt} (for a message that may be decrypted via a secret key
or a passphrase), or @option{--sign} and @option{--encrypt} together
(for a signed message that may be decrypted via a secret key or a
passphrase).

@item --store
@opindex store
Store only (make a simple RFC1991 literal data packet).

@item --decrypt
@itemx -d
@opindex decrypt
Decrypt the file given on the command line (or STDIN if no file
is specified) and write it to STDOUT (or the file specified with
@option{--output}). If the decrypted file is signed, the signature is also
verified. This command differs from the default operation, as it never
writes to the filename which is included in the file and it rejects
files which don't begin with an encrypted message.

@item --verify
@opindex verify
Assume that the first argument is a signed file or a detached signature
and verify it without generating any output. With no arguments, the
signature packet is read from STDIN. If only a sigfile is given, it may
be a complete signature or a detached signature, in which case the
signed stuff is expected in a file without the ".sig" or ".asc"
extension.  With more than 1 argument, the first should be a detached
signature and the remaining files are the signed stuff. To read the
signed stuff from STDIN, use @samp{-} as the second filename.  For
security reasons a detached signature cannot read the signed material
from STDIN without denoting it in the above way.

@item --multifile
@opindex multifile
This modifies certain other commands to accept multiple files for
processing on the command line or read from STDIN with each filename on
a separate line. This allows for many files to be processed at
once. @option{--multifile} may currently be used along with
@option{--verify}, @option{--encrypt}, and @option{--decrypt}. Note that
@option{--multifile --verify} may not be used with detached signatures.

@item --verify-files
@opindex verify-files
Identical to @option{--multifile --verify}.

@item --encrypt-files
@opindex encrypt-files
Identical to @option{--multifile --encrypt}.

@item --decrypt-files
@opindex decrypt-files
Identical to @option{--multifile --decrypt}.

@item --list-keys
@itemx -k
@itemx --list-public-keys
@opindex list-keys
List all keys from the public keyrings, or just the keys given on the
command line.
@ifset gpgone
@option{-k} is slightly different from @option{--list-keys} in that it
allows only for one argument and takes the second argument as the
keyring to search.  This is for command line compatibility with PGP 2
and has been removed in @command{gpg2}.
@end ifset

Avoid using the output of this command in scripts or other programs as
it is likely to change as GnuPG changes. See @option{--with-colons} for a
machine-parseable key listing command that is appropriate for use in
scripts and other programs.

@item --list-secret-keys
@itemx -K
@opindex list-secret-keys
List all keys from the secret keyrings, or just the ones given on the
command line. A @code{#} after the letters @code{sec} means that the
secret key is not usable (for example, if it was created via
@option{--export-secret-subkeys}).

@item --list-sigs
@opindex list-sigs
Same as @option{--list-keys}, but the signatures are listed too.
@ifclear gpgone
This command has the same effect as 
using @option{--list-keys} with @option{--with-sig-list}.
@end ifclear

For each signature listed, there are several flags in between the "sig"
tag and keyid. These flags give additional information about each
signature. From left to right, they are the numbers 1-3 for certificate
check level (see @option{--ask-cert-level}), "L" for a local or
non-exportable signature (see @option{--lsign-key}), "R" for a
nonRevocable signature (see the @option{--edit-key} command "nrsign"),
"P" for a signature that contains a policy URL (see
@option{--cert-policy-url}), "N" for a signature that contains a
notation (see @option{--cert-notation}), "X" for an eXpired signature
(see @option{--ask-cert-expire}), and the numbers 1-9 or "T" for 10 and
above to indicate trust signature levels (see the @option{--edit-key}
command "tsign").

@item --check-sigs
@opindex check-sigs
Same as @option{--list-sigs}, but the signatures are verified.  Note
that for performance reasons the revocation status of a signing key is
not shown.
@ifclear gpgone
This command has the same effect as 
using @option{--list-keys} with @option{--with-sig-check}.
@end ifclear

The status of the verification is indicated by a flag directly following
the "sig" tag (and thus before the flags described above for
@option{--list-sigs}).  A "!" indicates that the signature has been
successfully verified, a "-" denotes a bad signature and a "%" is used
if an error occurred while checking the signature (e.g. a non supported
algorithm).

@ifclear gpgone
@item --locate-keys
@opindex locate-keys
Locate the keys given as arguments.  This command basically uses the
same algorithm as used when locating keys for encryption or signing and
may thus be used to see what keys @command{@gpgname} might use.  In
particular external methods as defined by @option{--auto-key-locate} may
be used to locate a key.  Only public keys are listed.
@end ifclear


@item --fingerprint
@opindex fingerprint
List all keys (or the specified ones) along with their
fingerprints. This is the same output as @option{--list-keys} but with
the additional output of a line with the fingerprint. May also be
combined with @option{--list-sigs} or @option{--check-sigs}.  If this
command is given twice, the fingerprints of all secondary keys are
listed too.

@item --list-packets
@opindex list-packets
List only the sequence of packets. This is mainly
useful for debugging.


@item --card-edit
@opindex card-edit
Present a menu to work with a smartcard. The subcommand "help" provides
an overview on available commands. For a detailed description, please
see the Card HOWTO at
http://www.gnupg.org/documentation/howtos.html#GnuPG-cardHOWTO .

@item --card-status
@opindex card-status
Show the content of the smart card.

@item --change-pin
@opindex change-pin
Present a menu to allow changing the PIN of a smartcard. This
functionality is also available as the subcommand "passwd" with the
@option{--card-edit} command.

@item --delete-key @code{name}
@opindex delete-key
Remove key from the public keyring. In batch mode either @option{--yes} is
required or the key must be specified by fingerprint. This is a
safeguard against accidental deletion of multiple keys.

@item --delete-secret-key @code{name}
@opindex delete-secret-key
Remove key from the secret and public keyring. In batch mode the key
must be specified by fingerprint.

@item --delete-secret-and-public-key @code{name}
@opindex delete-secret-and-public-key
Same as @option{--delete-key}, but if a secret key exists, it will be
removed first. In batch mode the key must be specified by fingerprint.

@item --export
@opindex export
Either export all keys from all keyrings (default keyrings and those
registered via option @option{--keyring}), or if at least one name is given,
those of the given name. The new keyring is written to STDOUT or to the
file given with option @option{--output}. Use together with
@option{--armor} to mail those keys.

@item --send-keys @code{key IDs}
@opindex send-keys
Similar to @option{--export} but sends the keys to a keyserver.
Fingerprints may be used instead of key IDs. Option @option{--keyserver}
must be used to give the name of this keyserver. Don't send your
complete keyring to a keyserver --- select only those keys which are new
or changed by you.  If no key IDs are given, @command{gpg} does nothing.

@item --export-secret-keys
@itemx --export-secret-subkeys
@opindex export-secret-keys
@opindex export-secret-subkeys
Same as @option{--export}, but exports the secret keys instead.  This is
normally not very useful and a security risk.  The second form of the
command has the special property to render the secret part of the
primary key useless; this is a GNU extension to OpenPGP and other
implementations can not be expected to successfully import such a key.
See the option @option{--simple-sk-checksum} if you want to import such
an exported key with an older OpenPGP implementation.

@item --import
@itemx --fast-import
@opindex import
Import/merge keys. This adds the given keys to the
keyring. The fast version is currently just a synonym.

There are a few other options which control how this command works.
Most notable here is the @option{--import-options merge-only} option
which does not insert new keys but does only the merging of new
signatures, user-IDs and subkeys.

@item --recv-keys @code{key IDs}
@opindex recv-keys
Import the keys with the given key IDs from a keyserver. Option
@option{--keyserver} must be used to give the name of this keyserver.

@item --refresh-keys
@opindex refresh-keys
Request updates from a keyserver for keys that already exist on the
local keyring. This is useful for updating a key with the latest
signatures, user IDs, etc. Calling this with no arguments will refresh
the entire keyring. Option @option{--keyserver} must be used to give the
name of the keyserver for all keys that do not have preferred keyservers
set (see @option{--keyserver-options honor-keyserver-url}).

@item --search-keys @code{names}
@opindex search-keys
Search the keyserver for the given names. Multiple names given here will
be joined together to create the search string for the keyserver.
Option @option{--keyserver} must be used to give the name of this
keyserver.  Keyservers that support different search methods allow using
the syntax specified in "How to specify a user ID" below. Note that
different keyserver types support different search methods. Currently
only LDAP supports them all.

@item --fetch-keys @code{URIs}
@opindex fetch-keys
Retrieve keys located at the specified URIs. Note that different
installations of GnuPG may support different protocols (HTTP, FTP,
LDAP, etc.)

@item --update-trustdb
@opindex update-trustdb
Do trust database maintenance. This command iterates over all keys and
builds the Web of Trust. This is an interactive command because it may
have to ask for the "ownertrust" values for keys. The user has to give
an estimation of how far she trusts the owner of the displayed key to
correctly certify (sign) other keys. GnuPG only asks for the ownertrust
value if it has not yet been assigned to a key. Using the
@option{--edit-key} menu, the assigned value can be changed at any time.

@item --check-trustdb
@opindex check-trustdb
Do trust database maintenance without user interaction. From time to
time the trust database must be updated so that expired keys or
signatures and the resulting changes in the Web of Trust can be
tracked. Normally, GnuPG will calculate when this is required and do it
automatically unless @option{--no-auto-check-trustdb} is set. This
command can be used to force a trust database check at any time. The
processing is identical to that of @option{--update-trustdb} but it
skips keys with a not yet defined "ownertrust".

For use with cron jobs, this command can be used together with
@option{--batch} in which case the trust database check is done only if
a check is needed. To force a run even in batch mode add the option
@option{--yes}.

@anchor{option --export-ownertrust}
@item --export-ownertrust
@opindex export-ownertrust
Send the ownertrust values to STDOUT. This is useful for backup purposes
as these values are the only ones which can't be re-created from a
corrupted trustdb.  Example:
@c man:.RS
@example
  @gpgname{} --export-ownertrust > otrust.txt
@end example
@c man:.RE


@item --import-ownertrust
@opindex import-ownertrust
Update the trustdb with the ownertrust values stored in @code{files} (or
STDIN if not given); existing values will be overwritten.  In case of a
severely damaged trustdb and if you have a recent backup of the
ownertrust values (e.g. in the file @file{otrust.txt}, you may re-create
the trustdb using these commands:
@c man:.RS
@example
  cd ~/.gnupg
  rm trustdb.gpg
  @gpgname{} --import-ownertrust < otrust.txt
@end example
@c man:.RE


@item --rebuild-keydb-caches
@opindex rebuild-keydb-caches
When updating from version 1.0.6 to 1.0.7 this command should be used
to create signature caches in the keyring. It might be handy in other
situations too.

@item --print-md @code{algo}
@itemx --print-mds
@opindex print-md
Print message digest of algorithm ALGO for all given files or STDIN.
With the second form (or a deprecated "*" as algo) digests for all
available algorithms are printed.

@item --gen-random @code{0|1|2}
@opindex gen-random
Emit @var{count} random bytes of the given quality level. If count is
not given or zero, an endless sequence of random bytes will be emitted.
PLEASE, don't use this command unless you know what you are doing; it
may remove precious entropy from the system!

@item --gen-prime @code{mode}  @code{bits}
@opindex gen-prime
Use the source, Luke :-). The output format is still subject to change.


@item --enarmor
@item --dearmor
@opindex enarmor
@opindex --enarmor
Pack or unpack an arbitrary input into/from an OpenPGP ASCII armor.
This is a GnuPG extension to OpenPGP and in general not very useful.

@end table


@c *******************************************
@c *******  KEY MANGEMENT COMMANDS  **********
@c *******************************************
@node OpenPGP Key Management
@subsection How to manage your keys

This section explains the main commands for key management

@table @gnupgtabopt

@item --gen-key
@opindex gen-key
Generate a new key pair. This command is normally only used
interactively.

There is an experimental feature which allows you to create keys in
batch mode. See the file @file{doc/DETAILS} in the source distribution
on how to use this.

@item --gen-revoke @code{name}
@opindex gen-revoke
Generate a revocation certificate for the complete key. To revoke
a subkey or a signature, use the @option{--edit} command.

@item --desig-revoke @code{name}
@opindex desig-revoke
Generate a designated revocation certificate for a key. This allows a
user (with the permission of the keyholder) to revoke someone else's
key.


@item --edit-key
@opindex edit-key
Present a menu which enables you to do most of the key management
related tasks.  It expects the specification of a key on the command
line.

@c ******** Begin Edit-key Options **********
@table @asis

@item uid @code{n}
@opindex keyedit:uid
Toggle selection of user ID or photographic user ID with index @code{n}.
Use @code{*} to select all and @code{0} to deselect all.

@item key @code{n}
@opindex keyedit:key
Toggle selection of subkey with index @code{n}.
Use @code{*} to select all and @code{0} to deselect all.

@item sign
@opindex keyedit:sign
Make a signature on key of user @code{name} If the key is not yet
signed by the default user (or the users given with -u), the program
displays the information of the key again, together with its
fingerprint and asks whether it should be signed. This question is
repeated for all users specified with
-u.

@item lsign
@opindex keyedit:lsign
Same as "sign" but the signature is marked as non-exportable and will
therefore never be used by others. This may be used to make keys
valid only in the local environment.

@item nrsign
@opindex keyedit:nrsign
Same as "sign" but the signature is marked as non-revocable and can
therefore never be revoked.

@item tsign
@opindex keyedit:tsign
Make a trust signature. This is a signature that combines the notions
of certification (like a regular signature), and trust (like the
"trust" command). It is generally only useful in distinct communities
or groups.
@end table

@c man:.RS
Note that "l" (for local / non-exportable), "nr" (for non-revocable,
and "t" (for trust) may be freely mixed and prefixed to "sign" to
create a signature of any type desired.
@c man:.RE

@table @asis

@item delsig
@opindex keyedit:delsig
Delete a signature. Note that it is not possible to retract a signature,
once it has been send to the public (i.e. to a keyserver).  In that case
you better use @code{revsig}.

@item revsig
@opindex keyedit:revsig
Revoke a signature. For every signature which has been generated by
one of the secret keys, GnuPG asks whether a revocation certificate
should be generated.

@item check
@opindex keyedit:check
Check the signatures on all selected user IDs.

@item adduid
@opindex keyedit:adduid
Create an additional user ID.

@item addphoto
@opindex keyedit:addphoto
Create a photographic user ID. This will prompt for a JPEG file that
will be embedded into the user ID. Note that a very large JPEG will make
for a very large key. Also note that some programs will display your
JPEG unchanged (GnuPG), and some programs will scale it to fit in a
dialog box (PGP).

@item showphoto
@opindex keyedit:showphoto
Display the selected photographic user ID.

@item deluid
@opindex keyedit:deluid
Delete a user ID or photographic user ID.  Note that it is not
possible to retract a user id, once it has been send to the public
(i.e. to a keyserver).  In that case you better use @code{revuid}.

@item revuid
@opindex keyedit:revuid
Revoke a user ID or photographic user ID.

@item primary
@opindex keyedit:primary
Flag the current user id as the primary one, removes the primary user
id flag from all other user ids and sets the timestamp of all affected
self-signatures one second ahead. Note that setting a photo user ID
as primary makes it primary over other photo user IDs, and setting a
regular user ID as primary makes it primary over other regular user
IDs.

@item keyserver
@opindex keyedit:keyserver
Set a preferred keyserver for the specified user ID(s). This allows
other users to know where you prefer they get your key from. See
@option{--keyserver-options honor-keyserver-url} for more on how this
works.  Setting a value of "none" removes an existing preferred
keyserver.

@item notation
@opindex keyedit:notation
Set a name=value notation for the specified user ID(s). See
@option{--cert-notation} for more on how this works. Setting a value of
"none" removes all notations, setting a notation prefixed with a minus
sign (-) removes that notation, and setting a notation name (without the
=value) prefixed with a minus sign removes all notations with that name.

@item pref
@opindex keyedit:pref
List preferences from the selected user ID. This shows the actual
preferences, without including any implied preferences.

@item showpref
@opindex keyedit:showpref
More verbose preferences listing for the selected user ID. This shows
the preferences in effect by including the implied preferences of 3DES
(cipher), SHA-1 (digest), and Uncompressed (compression) if they are
not already included in the preference list. In addition, the
preferred keyserver and signature notations (if any) are shown.

@item setpref @code{string}
@opindex keyedit:setpref
Set the list of user ID preferences to @code{string} for all (or just
the selected) user IDs. Calling setpref with no arguments sets the
preference list to the default (either built-in or set via
@option{--default-preference-list}), and calling setpref with "none"
as the argument sets an empty preference list. Use @command{@gpgname
--version} to get a list of available algorithms. Note that while you
can change the preferences on an attribute user ID (aka "photo ID"),
GnuPG does not select keys via attribute user IDs so these preferences
will not be used by GnuPG.

When setting preferences, you should list the algorithms in the order
which you'd like to see them used by someone else when encrypting a
message to your key.  If you don't include 3DES, it will be
automatically added at the end.  Note that there are many factors that
go into choosing an algorithm (for example, your key may not be the
only recipient), and so the remote OpenPGP application being used to
send to you may or may not follow your exact chosen order for a given
message.  It will, however, only choose an algorithm that is present
on the preference list of every recipient key.  See also the
INTEROPERABILITY WITH OTHER OPENPGP PROGRAMS section below.

@item addkey
@opindex keyedit:addkey
Add a subkey to this key.

@item addcardkey
@opindex keyedit:addcardkey
Generate a subkey on a card and add it to this key.

@item keytocard
@opindex keyedit:keytocard
Transfer the selected secret subkey (or the primary key if no subkey
has been selected) to a smartcard. The secret key in the keyring will
be replaced by a stub if the key could be stored successfully on the
card and you use the save command later. Only certain key types may be
transferred to the card. A sub menu allows you to select on what card
to store the key. Note that it is not possible to get that key back
from the card - if the card gets broken your secret key will be lost
unless you have a backup somewhere.

@item bkuptocard @code{file}
@opindex keyedit:bkuptocard
Restore the given file to a card. This command may be used to restore a
backup key (as generated during card initialization) to a new card. In
almost all cases this will be the encryption key. You should use this
command only with the corresponding public key and make sure that the
file given as argument is indeed the backup to restore. You should then
select 2 to restore as encryption key.  You will first be asked to enter
the passphrase of the backup key and then for the Admin PIN of the card.

@item delkey
@opindex keyedit:delkey
Remove a subkey (secondart key). Note that it is not possible to retract
a subkey, once it has been send to the public (i.e. to a keyserver).  In
that case you better use @code{revkey}.

@item revkey
@opindex keyedit:revkey
Revoke a subkey.

@item expire
@opindex keyedit:expire
Change the key or subkey expiration time. If a subkey is selected, the
expiration time of this subkey will be changed. With no selection, the
key expiration of the primary key is changed.

@item trust
@opindex keyedit:trust
Change the owner trust value for the key. This updates the trust-db
immediately and no save is required.

@item disable
@itemx enable
@opindex keyedit:disable
@opindex keyedit:enable
Disable or enable an entire key. A disabled key can not normally be
used for encryption.

@item addrevoker
@opindex keyedit:addrevoker
Add a designated revoker to the key. This takes one optional argument:
"sensitive". If a designated revoker is marked as sensitive, it will
not be exported by default (see export-options).

@item passwd
@opindex keyedit:passwd
Change the passphrase of the secret key.

@item toggle
@opindex keyedit:toggle
Toggle between public and secret key listing.

@item clean
@opindex keyedit:clean
Compact (by removing all signatures except the selfsig) any user ID
that is no longer usable (e.g. revoked, or expired). Then, remove any
signatures that are not usable by the trust calculations.
Specifically, this removes any signature that does not validate, any
signature that is superseded by a later signature, revoked signatures,
and signatures issued by keys that are not present on the keyring.

@item minimize
@opindex keyedit:minimize
Make the key as small as possible. This removes all signatures from
each user ID except for the most recent self-signature.

@item cross-certify
@opindex keyedit:cross-certify
Add cross-certification signatures to signing subkeys that may not
currently have them. Cross-certification signatures protect against a
subtle attack against signing subkeys. See
@option{--require-cross-certification}.  All new keys generated have
this signature by default, so this option is only useful to bring
older keys up to date.

@item save
@opindex keyedit:save
Save all changes to the key rings and quit.

@item quit
@opindex keyedit:quit
Quit the program without updating the
key rings.

@end table

@c man:.RS
The listing shows you the key with its secondary keys and all user
ids. Selected keys or user ids are indicated by an asterisk. The trust
value is displayed with the primary key: the first is the assigned owner
trust and the second is the calculated trust value. Letters are used for
the values:
@c man:.RE

@table @asis

@item -
No ownertrust assigned / not yet calculated.

@item e
Trust
calculation has failed; probably due to an expired key.

@item q
Not enough information for calculation.

@item n
Never trust this key.

@item m
Marginally trusted.

@item f
Fully trusted.

@item u
Ultimately trusted.
@end table
@c ******** End Edit-key Options **********

@item --sign-key @code{name}
@opindex sign-key
Signs a public key with your secret key. This is a shortcut version of
the subcommand "sign" from @option{--edit}.

@item --lsign-key @code{name}
@opindex lsign-key
Signs a public key with your secret key but marks it as
non-exportable. This is a shortcut version of the subcommand "lsign"
from @option{--edit-key}.


@end table


@c *******************************************
@c ***************            ****************
@c ***************  OPTIONS   ****************
@c ***************            ****************
@c *******************************************
@mansect options
@node GPG Options
@section Option Summary

@command{@gpgname} comes features a bunch of options to control the exact
behaviour and to change the default configuration.

@menu
* GPG Configuration Options::   How to change the configuration.
* GPG Key related Options::     Key related options.
* GPG Input and Output::        Input and Output.
* OpenPGP Options::             OpenPGP protocol specific options.
* GPG Esoteric Options::        Doing things one usually don't want to do.
@end menu

Long options can be put in an options file (default
"~/.gnupg/gpg.conf"). Short option names will not work - for example,
"armor" is a valid option for the options file, while "a" is not. Do not
write the 2 dashes, but simply the name of the option and any required
arguments. Lines with a hash ('#') as the first non-white-space
character are ignored. Commands may be put in this file too, but that is
not generally useful as the command will execute automatically with
every execution of gpg.

Please remember that option parsing stops as soon as a non-option is
encountered, you can explicitly stop parsing by using the special option
@option{--}.

@c *******************************************
@c ********  CONFIGURATION OPTIONS  **********
@c *******************************************
@node GPG Configuration Options
@subsection How to change the configuration

These options are used to change the configuration and are usually found
in the option file.

@table @gnupgtabopt

@item --default-key @var{name}
@opindex default-key
Use @var{name} as the default key to sign with. If this option is not
used, the default key is the first key found in the secret keyring.
Note that @option{-u} or @option{--local-user} overrides this option.

@item --default-recipient @var{name}
@opindex default-recipient
Use @var{name} as default recipient if option @option{--recipient} is
not used and don't ask if this is a valid one. @var{name} must be
non-empty.

@item --default-recipient-self
@opindex default-recipient-self
Use the default key as default recipient if option @option{--recipient} is not
used and don't ask if this is a valid one. The default key is the first
one from the secret keyring or the one set with @option{--default-key}.

@item --no-default-recipient
@opindex no-default-recipient
Reset @option{--default-recipient} and @option{--default-recipient-self}.

@item -v, --verbose
@opindex verbose
Give more information during processing. If used
twice, the input data is listed in detail.

@item --no-verbose
@opindex no-verbose
Reset verbose level to 0.

@item -q, --quiet
@opindex quiet
Try to be as quiet as possible.

@item --batch
@itemx --no-batch
@opindex batch
@opindex no-batch
Use batch mode.  Never ask, do not allow interactive commands.
@option{--no-batch} disables this option.  Note that even with a
filename given on the command line, gpg might still need to read from
STDIN (in particular if gpg figures that the input is a
detached signature and no data file has been specified).  Thus if you
do not want to feed data via STDIN, you should connect STDIN to
@file{/dev/null}.

@item --no-tty
@opindex no-tty
Make sure that the TTY (terminal) is never used for any output.
This option is needed in some cases because GnuPG sometimes prints
warnings to the TTY even if @option{--batch} is used.

@item --yes
@opindex yes
Assume "yes" on most questions.

@item --no
@opindex no
Assume "no" on most questions.


@item --list-options @code{parameters}
@opindex list-options
This is a space or comma delimited string that gives options used when
listing keys and signatures (that is, @option{--list-keys},
@option{--list-sigs}, @option{--list-public-keys},
@option{--list-secret-keys}, and the @option{--edit-key} functions).
Options can be prepended with a @option{no-} (after the two dashes) to
give the opposite meaning.  The options are:

@table @asis

@item show-photos
@opindex list-options:show-photos
Causes @option{--list-keys}, @option{--list-sigs},
@option{--list-public-keys}, and @option{--list-secret-keys} to display
any photo IDs attached to the key.  Defaults to no. See also
@option{--photo-viewer}.

@item show-policy-urls
@opindex list-options:show-policy-urls
Show policy URLs in the @option{--list-sigs} or @option{--check-sigs}
listings.  Defaults to no.

@item show-notations
@itemx show-std-notations
@itemx show-user-notations
@opindex list-options:show-notations
@opindex list-options:show-std-notations
@opindex list-options:show-user-notations
Show all, IETF standard, or user-defined signature notations in the
@option{--list-sigs} or @option{--check-sigs} listings. Defaults to no.

@item show-keyserver-urls

Show any preferred keyserver URL in the @option{--list-sigs} or
@option{--check-sigs} listings. Defaults to no.

@item show-uid-validity
Display the calculated validity of user IDs during key listings.
Defaults to no.

@item show-unusable-uids
Show revoked and expired user IDs in key listings. Defaults to no.

@item show-unusable-subkeys
Show revoked and expired subkeys in key listings. Defaults to no.

@item show-keyring
Display the keyring name at the head of key listings to show which
keyring a given key resides on. Defaults to no.

@item show-sig-expire
Show signature expiration dates (if any) during @option{--list-sigs} or
@option{--check-sigs} listings. Defaults to no.

@item show-sig-subpackets
Include signature subpackets in the key listing. This option can take an
optional argument list of the subpackets to list. If no argument is
passed, list all subpackets. Defaults to no. This option is only
meaningful when using @option{--with-colons} along with
@option{--list-sigs} or @option{--check-sigs}.
@end table

@item --verify-options @code{parameters}
This is a space or comma delimited string that gives options used when
verifying signatures. Options can be prepended with a `no-' to give
the opposite meaning. The options are:

@table @asis

@item show-photos
Display any photo IDs present on the key that issued the signature.
Defaults to no. See also @option{--photo-viewer}.

@item show-policy-urls
Show policy URLs in the signature being verified. Defaults to no.

@item show-notations
@itemx show-std-notations
@itemx show-user-notations
Show all, IETF standard, or user-defined signature notations in the
signature being verified. Defaults to IETF standard.

@item show-keyserver-urls
Show any preferred keyserver URL in the signature being verified.
Defaults to no.

@item show-uid-validity
Display the calculated validity of the user IDs on the key that issued
the signature. Defaults to no.

@item show-unusable-uids
Show revoked and expired user IDs during signature verification.
Defaults to no.

@item show-primary-uid-only
Show only the primary user ID during signature verification.  That is
all the AKA lines as well as photo Ids are not shown with the signature
verification status.

@item pka-lookups
Enable PKA lookups to verify sender addresses. Note that PKA is based
on DNS, and so enabling this option may disclose information on when
and what signatures are verified or to whom data is encrypted. This
is similar to the "web bug" described for the auto-key-retrieve
feature.

@item pka-trust-increase
Raise the trust in a signature to full if the signature passes PKA
validation. This option is only meaningful if pka-lookups is set.
@end table

@item --enable-dsa2
@itemx --disable-dsa2
Enable hash truncation for all DSA keys even for old DSA Keys up to
1024 bit.  This is also the default with @option{--openpgp}.  Note
that older versions of GnuPG also required this flag to allow the
generation of DSA larger than 1024 bit.

@item --photo-viewer @code{string}
This is the command line that should be run to view a photo ID. "%i"
will be expanded to a filename containing the photo. "%I" does the
same, except the file will not be deleted once the viewer exits.
Other flags are "%k" for the key ID, "%K" for the long key ID, "%f"
for the key fingerprint, "%t" for the extension of the image type
(e.g. "jpg"), "%T" for the MIME type of the image (e.g. "image/jpeg"),
and "%%" for an actual percent sign. If neither %i or %I are present,
then the photo will be supplied to the viewer on standard input.

The default viewer is "xloadimage -fork -quiet -title 'KeyID 0x%k'
STDIN". Note that if your image viewer program is not secure, then
executing it from GnuPG does not make it secure.

@item --exec-path @code{string}
Sets a list of directories to search for photo viewers and keyserver
helpers. If not provided, keyserver helpers use the compiled-in
default directory, and photo viewers use the $PATH environment
variable.
Note, that on W32 system this value is ignored when searching for
keyserver helpers.

@item --keyring @code{file}
Add @code{file} to the current list of keyrings. If @code{file} begins
with a tilde and a slash, these are replaced by the $HOME directory. If
the filename does not contain a slash, it is assumed to be in the GnuPG
home directory ("~/.gnupg" if @option{--homedir} or $GNUPGHOME is not
used).

Note that this adds a keyring to the current list. If the intent is to
use the specified keyring alone, use @option{--keyring} along with
@option{--no-default-keyring}.

@item --secret-keyring @code{file}
Same as @option{--keyring} but for the secret keyrings.

@item --primary-keyring @code{file}
Designate @code{file} as the primary public keyring. This means that
newly imported keys (via @option{--import} or keyserver
@option{--recv-from}) will go to this keyring.

@item --trustdb-name @code{file}
Use @code{file} instead of the default trustdb. If @code{file} begins
with a tilde and a slash, these are replaced by the $HOME directory. If
the filename does not contain a slash, it is assumed to be in the GnuPG
home directory (@file{~/.gnupg} if @option{--homedir} or $GNUPGHOME is
not used).

@ifset gpgone
@anchor{option --homedir}
@end ifset
@include opt-homedir.texi


@ifset gpgone
@item --pcsc-driver @code{file}
Use @code{file} to access the smartcard reader. The current default is
`libpcsclite.so.1' for GLIBC based systems,
`/System/Library/Frameworks/PCSC.framework/PCSC' for MAC OS X,
`winscard.dll' for Windows and `libpcsclite.so' for other systems.
@end ifset

@ifset gpgone
@item --disable-ccid
Disable the integrated support for CCID compliant readers. This
allows to fall back to one of the other drivers even if the internal
CCID driver can handle the reader. Note, that CCID support is only
available if libusb was available at build time.
@end ifset

@ifset gpgone
@item --reader-port @code{number_or_string}
This option may be used to specify the port of the card terminal. A
value of 0 refers to the first serial device; add 32768 to access USB
devices. The default is 32768 (first USB device). PC/SC or CCID
readers might need a string here; run the program in verbose mode to get
a list of available readers. The default is then the first reader
found.
@end ifset

@item --display-charset @code{name}
Set the name of the native character set. This is used to convert
some informational strings like user IDs to the proper UTF-8 encoding.
Note that this has nothing to do with the character set of data to be
encrypted or signed; GnuPG does not recode user-supplied data. If
this option is not used, the default character set is determined from
the current locale. A verbosity level of 3 shows the chosen set.
Valid values for @code{name} are:

@table @asis

@item iso-8859-1
This is the Latin 1 set.

@item iso-8859-2
The Latin 2 set.

@item iso-8859-15
This is currently an alias for
the Latin 1 set.

@item koi8-r
The usual Russian set (rfc1489).

@item utf-8
Bypass all translations and assume
that the OS uses native UTF-8 encoding.
@end table

@item --utf8-strings
@itemx --no-utf8-strings
Assume that command line arguments are given as UTF8 strings. The
default (@option{--no-utf8-strings}) is to assume that arguments are
encoded in the character set as specified by
@option{--display-charset}. These options affect all following
arguments. Both options may be used multiple times.

@ifset gpgone
@anchor{option --options}
@end ifset
@item --options @code{file}
Read options from @code{file} and do not try to read them from the
default options file in the homedir (see @option{--homedir}). This
option is ignored if used in an options file.

@item --no-options
Shortcut for @option{--options /dev/null}. This option is detected
before an attempt to open an option file.  Using this option will also
prevent the creation of a @file{~/.gnupg} homedir.



@item -z @code{n}
@itemx --compress-level @code{n}
@itemx --bzip2-compress-level @code{n}
Set compression level to @code{n} for the ZIP and ZLIB compression
algorithms. The default is to use the default compression level of zlib
(normally 6). @option{--bzip2-compress-level} sets the compression level
for the BZIP2 compression algorithm (defaulting to 6 as well). This is a
different option from @option{--compress-level} since BZIP2 uses a
significant amount of memory for each additional compression level.
@option{-z} sets both. A value of 0 for @code{n} disables compression.

@item --bzip2-decompress-lowmem
Use a different decompression method for BZIP2 compressed files. This
alternate method uses a bit more than half the memory, but also runs
at half the speed. This is useful under extreme low memory
circumstances when the file was originally compressed at a high
@option{--bzip2-compress-level}.


@item --mangle-dos-filenames
@itemx --no-mangle-dos-filenames
@opindex mangle-dos-filenames
@opindex no-mangle-dos-filenames
Older version of Windows cannot handle filenames with more than one
dot. @option{--mangle-dos-filenames} causes GnuPG to replace (rather
than add to) the extension of an output filename to avoid this
problem. This option is off by default and has no effect on non-Windows
platforms.

@item --ask-cert-level
@itemx --no-ask-cert-level
When making a key signature, prompt for a certification level. If this
option is not specified, the certification level used is set via
@option{--default-cert-level}. See @option{--default-cert-level} for
information on the specific levels and how they are
used. @option{--no-ask-cert-level} disables this option. This option
defaults to no.

@item --default-cert-level @code{n}
The default to use for the check level when signing a key.

0 means you make no particular claim as to how carefully you verified
the key.

1 means you believe the key is owned by the person who claims to own
it but you could not, or did not verify the key at all. This is
useful for a "persona" verification, where you sign the key of a
pseudonymous user.

2 means you did casual verification of the key. For example, this
could mean that you verified that the key fingerprint and checked the
user ID on the key against a photo ID.

3 means you did extensive verification of the key. For example, this
could mean that you verified the key fingerprint with the owner of the
key in person, and that you checked, by means of a hard to forge
document with a photo ID (such as a passport) that the name of the key
owner matches the name in the user ID on the key, and finally that you
verified (by exchange of email) that the email address on the key
belongs to the key owner.

Note that the examples given above for levels 2 and 3 are just that:
examples. In the end, it is up to you to decide just what "casual"
and "extensive" mean to you.

This option defaults to 0 (no particular claim).

@item --min-cert-level
When building the trust database, treat any signatures with a
certification level below this as invalid. Defaults to 2, which
disregards level 1 signatures. Note that level 0 "no particular
claim" signatures are always accepted.

@item --trusted-key @code{long key ID}
Assume that the specified key (which must be given
as a full 8 byte key ID) is as trustworthy as one of
your own secret keys. This option is useful if you
don't want to keep your secret keys (or one of them)
online but still want to be able to check the validity of a given
recipient's or signator's key.

@item --trust-model @code{pgp|classic|direct|always|auto}
Set what trust model GnuPG should follow. The models are:

@table @asis

@item pgp
This is the Web of Trust combined with trust signatures as used in PGP
5.x and later. This is the default trust model when creating a new
trust database.

@item classic
This is the standard Web of Trust as used in PGP 2.x and earlier.

@item direct
Key validity is set directly by the user and not calculated via the
Web of Trust.

@item always
Skip key validation and assume that used keys are always fully
trusted. You generally won't use this unless you are using some
external validation scheme. This option also suppresses the
"[uncertain]" tag printed with signature checks when there is no
evidence that the user ID is bound to the key.

@item auto
Select the trust model depending on whatever the internal trust
database says. This is the default model if such a database already
exists.
@end table

@item --auto-key-locate @code{parameters}
@itemx --no-auto-key-locate
GnuPG can automatically locate and retrieve keys as needed using this
option. This happens when encrypting to an email address (in the
"user@@example.com" form), and there are no user@@example.com keys on
the local keyring.  This option takes any number of the following
mechanisms, in the order they are to be tried:

@table @asis

@item cert
Locate a key using DNS CERT, as specified in rfc4398.

@item pka
Locate a key using DNS PKA.

@item ldap
Using DNS Service Discovery, check the domain in question for any LDAP
keyservers to use.  If this fails, attempt to locate the key using the
PGP Universal method of checking @samp{ldap://keys.(thedomain)}.

@item keyserver
Locate a key using whatever keyserver is defined using the
@option{--keyserver} option.

@item keyserver-URL
In addition, a keyserver URL as used in the @option{--keyserver} option
may be used here to query that particular keyserver.

@item local
Locate the key using the local keyrings.  This mechanism allows to
select the order a local key lookup is done.  Thus using
@samp{--auto-key-locate local} is identical to
@option{--no-auto-key-locate}.

@item nodefault
This flag disables the standard local key lookup, done before any of the
mechanisms defined by the @option{--auto-key-locate} are tried.  The
position of this mechanism in the list does not matter.  It is not
required if @code{local} is also used.

@end table

@item --keyid-format @code{short|0xshort|long|0xlong}
Select how to display key IDs. "short" is the traditional 8-character
key ID. "long" is the more accurate (but less convenient)
16-character key ID. Add an "0x" to either to include an "0x" at the
beginning of the key ID, as in 0x99242560.

@item --keyserver @code{name}
Use @code{name} as your keyserver. This is the server that
@option{--recv-keys}, @option{--send-keys}, and @option{--search-keys}
will communicate with to receive keys from, send keys to, and search for
keys on. The format of the @code{name} is a URI:
`scheme:[//]keyservername[:port]' The scheme is the type of keyserver:
"hkp" for the HTTP (or compatible) keyservers, "ldap" for the LDAP
keyservers, or "mailto" for the Graff email keyserver. Note that your
particular installation of GnuPG may have other keyserver types
available as well. Keyserver schemes are case-insensitive. After the
keyserver name, optional keyserver configuration options may be
provided. These are the same as the global @option{--keyserver-options}
from below, but apply only to this particular keyserver.

Most keyservers synchronize with each other, so there is generally no
need to send keys to more than one server. The keyserver
@code{hkp://keys.gnupg.net} uses round robin DNS to give a different
keyserver each time you use it.

@item --keyserver-options @code{name=value1 }
This is a space or comma delimited string that gives options for the
keyserver. Options can be prefixed with a `no-' to give the opposite
meaning. Valid import-options or export-options may be used here as
well to apply to importing (@option{--recv-key}) or exporting
(@option{--send-key}) a key from a keyserver. While not all options
are available for all keyserver types, some common options are:

@table @asis

@item include-revoked
When searching for a key with @option{--search-keys}, include keys that
are marked on the keyserver as revoked. Note that not all keyservers
differentiate between revoked and unrevoked keys, and for such
keyservers this option is meaningless. Note also that most keyservers do
not have cryptographic verification of key revocations, and so turning
this option off may result in skipping keys that are incorrectly marked
as revoked.

@item include-disabled
When searching for a key with @option{--search-keys}, include keys that
are marked on the keyserver as disabled. Note that this option is not
used with HKP keyservers.

@item auto-key-retrieve
This option enables the automatic retrieving of keys from a keyserver
when verifying signatures made by keys that are not on the local
keyring.

Note that this option makes a "web bug" like behavior possible.
Keyserver operators can see which keys you request, so by sending you
a message signed by a brand new key (which you naturally will not have
on your local keyring), the operator can tell both your IP address and
the time when you verified the signature.

@item honor-keyserver-url
When using @option{--refresh-keys}, if the key in question has a preferred
keyserver URL, then use that preferred keyserver to refresh the key
from. In addition, if auto-key-retrieve is set, and the signature
being verified has a preferred keyserver URL, then use that preferred
keyserver to fetch the key from. Defaults to yes.

@item honor-pka-record
If auto-key-retrieve is set, and the signature being verified has a
PKA record, then use the PKA information to fetch the key. Defaults
to yes.

@item include-subkeys
When receiving a key, include subkeys as potential targets. Note that
this option is not used with HKP keyservers, as they do not support
retrieving keys by subkey id.

@item use-temp-files
On most Unix-like platforms, GnuPG communicates with the keyserver
helper program via pipes, which is the most efficient method. This
option forces GnuPG to use temporary files to communicate. On some
platforms (such as Win32 and RISC OS), this option is always enabled.

@item keep-temp-files
If using `use-temp-files', do not delete the temp files after using
them. This option is useful to learn the keyserver communication
protocol by reading the temporary files.

@item verbose
Tell the keyserver helper program to be more verbose. This option can
be repeated multiple times to increase the verbosity level.

@item timeout
Tell the keyserver helper program how long (in seconds) to try and
perform a keyserver action before giving up. Note that performing
multiple actions at the same time uses this timeout value per action.
For example, when retrieving multiple keys via @option{--recv-keys}, the
timeout applies separately to each key retrieval, and not to the
@option{--recv-keys} command as a whole. Defaults to 30 seconds.

@item http-proxy=@code{value}
Set the proxy to use for HTTP and HKP keyservers.  This overrides the
"http_proxy" environment variable, if any.

@item max-cert-size
When retrieving a key via DNS CERT, only accept keys up to this size.
Defaults to 16384 bytes.

@item debug
Turn on debug output in the keyserver helper program.  Note that the
details of debug output depends on which keyserver helper program is
being used, and in turn, on any libraries that the keyserver helper
program uses internally (libcurl, openldap, etc).

@item check-cert
Enable certificate checking if the keyserver presents one (for hkps or
ldaps).  Defaults to on.

@item ca-cert-file
Provide a certificate file to override the system default.  Only
necessary if check-cert is enabled, and the keyserver is using a
certificate that is not present in a system default certificate list.

@end table

@item --completes-needed @code{n}
Number of completely trusted users to introduce a new
key signer (defaults to 1).

@item --marginals-needed @code{n}
Number of marginally trusted users to introduce a new
key signer (defaults to 3)

@item --max-cert-depth @code{n}
Maximum depth of a certification chain (default is 5).

@item --simple-sk-checksum
Secret keys are integrity protected by using a SHA-1 checksum. This
method is part of the upcoming enhanced OpenPGP specification but
GnuPG already uses it as a countermeasure against certain attacks.
Old applications don't understand this new format, so this option may
be used to switch back to the old behaviour. Using this option bears
a security risk. Note that using this option only takes effect when
the secret key is encrypted - the simplest way to make this happen is
to change the passphrase on the key (even changing it to the same
value is acceptable).

@item --no-sig-cache
Do not cache the verification status of key signatures.
Caching gives a much better performance in key listings. However, if
you suspect that your public keyring is not save against write
modifications, you can use this option to disable the caching. It
probably does not make sense to disable it because all kind of damage
can be done if someone else has write access to your public keyring.

@item --no-sig-create-check
GnuPG normally verifies each signature right after creation to protect
against bugs and hardware malfunctions which could leak out bits from
the secret key. This extra verification needs some time (about 115%
for DSA keys), and so this option can be used to disable it.
However, due to the fact that the signature creation needs manual
interaction, this performance penalty does not matter in most settings.

@item --auto-check-trustdb
@itemx --no-auto-check-trustdb
If GnuPG feels that its information about the Web of Trust has to be
updated, it automatically runs the @option{--check-trustdb} command
internally.  This may be a time consuming
process. @option{--no-auto-check-trustdb} disables this option.

@item --use-agent
@itemx --no-use-agent
@ifclear gpgone
This is dummy option. @command{@gpgname} always requires the agent.
@end ifclear
@ifset gpgone
Try to use the GnuPG-Agent.  With this option, GnuPG first tries to
connect to the agent before it asks for a
passphrase. @option{--no-use-agent} disables this option.
@end ifset

@item --gpg-agent-info
@ifclear gpgone
This is dummy option. It has no effect when used with @command{gpg2}.
@end ifclear
@ifset gpgone
Override the value of the environment variable
@samp{GPG_AGENT_INFO}. This is only used when @option{--use-agent} has
been given.  Given that this option is not anymore used by
@command{gpg2}, it should be avoided if possible.
@end ifset

@item --lock-once
Lock the databases the first time a lock is requested
and do not release the lock until the process
terminates.

@item --lock-multiple
Release the locks every time a lock is no longer
needed. Use this to override a previous @option{--lock-once}
from a config file.

@item --lock-never
Disable locking entirely. This option should be used only in very
special environments, where it can be assured that only one process
is accessing those files. A bootable floppy with a stand-alone
encryption system will probably use this. Improper usage of this
option may lead to data and key corruption.

@item --exit-on-status-write-error
This option will cause write errors on the status FD to immediately
terminate the process. That should in fact be the default but it never
worked this way and thus we need an option to enable this, so that the
change won't break applications which close their end of a status fd
connected pipe too early. Using this option along with
@option{--enable-progress-filter} may be used to cleanly cancel long
running gpg operations.

@item --limit-card-insert-tries @code{n}
With @code{n} greater than 0 the number of prompts asking to insert a
smartcard gets limited to N-1. Thus with a value of 1 gpg won't at
all ask to insert a card if none has been inserted at startup. This
option is useful in the configuration file in case an application does
not know about the smartcard support and waits ad infinitum for an
inserted card.

@item --no-random-seed-file
GnuPG uses a file to store its internal random pool over invocations.
This makes random generation faster; however sometimes write operations
are not desired. This option can be used to achieve that with the cost of
slower random generation.

@item --no-greeting
Suppress the initial copyright message.

@item --no-secmem-warning
Suppress the warning about "using insecure memory".

@item --no-permission-warning
Suppress the warning about unsafe file and home directory (@option{--homedir})
permissions. Note that the permission checks that GnuPG performs are
not intended to be authoritative, but rather they simply warn about
certain common permission problems. Do not assume that the lack of a
warning means that your system is secure.

Note that the warning for unsafe @option{--homedir} permissions cannot be
suppressed in the gpg.conf file, as this would allow an attacker to
place an unsafe gpg.conf file in place, and use this file to suppress
warnings about itself. The @option{--homedir} permissions warning may only be
suppressed on the command line.

@item --no-mdc-warning
Suppress the warning about missing MDC integrity protection.

@item --require-secmem
@itemx --no-require-secmem
Refuse to run if GnuPG cannot get secure memory. Defaults to no
(i.e. run, but give a warning).


@item --require-cross-certification
@itemx --no-require-cross-certification
When verifying a signature made from a subkey, ensure that the cross
certification "back signature" on the subkey is present and valid.  This
protects against a subtle attack against subkeys that can sign.
Defaults to @option{--require-cross-certification} for
@command{@gpgname}.

@item --expert
@itemx --no-expert
Allow the user to do certain nonsensical or "silly" things like
signing an expired or revoked key, or certain potentially incompatible
things like generating unusual key types. This also disables certain
warning messages about potentially incompatible actions. As the name
implies, this option is for experts only. If you don't fully
understand the implications of what it allows you to do, leave this
off. @option{--no-expert} disables this option.




@end table


@c *******************************************
@c ********  KEY RELATED OPTIONS  ************
@c *******************************************
@node GPG Key related Options
@subsection Key related options

@table @gnupgtabopt

@item --recipient @var{name}
@itemx -r
@opindex recipient
Encrypt for user id @var{name}. If this option or
@option{--hidden-recipient} is not specified, GnuPG asks for the user-id
unless @option{--default-recipient} is given.

@item --hidden-recipient @var{name}
@itemx -R
@opindex hidden-recipient
Encrypt for user ID @var{name}, but hide the key ID of this user's
key. This option helps to hide the receiver of the message and is a
limited countermeasure against traffic analysis. If this option or
@option{--recipient} is not specified, GnuPG asks for the user ID unless
@option{--default-recipient} is given.

@item --encrypt-to @code{name}
Same as @option{--recipient} but this one is intended for use in the
options file and may be used with your own user-id as an
"encrypt-to-self". These keys are only used when there are other
recipients given either by use of @option{--recipient} or by the asked
user id.  No trust checking is performed for these user ids and even
disabled keys can be used.

@item --hidden-encrypt-to @code{name}
Same as @option{--hidden-recipient} but this one is intended for use in the
options file and may be used with your own user-id as a hidden
"encrypt-to-self". These keys are only used when there are other
recipients given either by use of @option{--recipient} or by the asked user id.
No trust checking is performed for these user ids and even disabled
keys can be used.

@item --no-encrypt-to
Disable the use of all @option{--encrypt-to} and
@option{--hidden-encrypt-to} keys.

@item --group @code{name=value1 }
Sets up a named group, which is similar to aliases in email programs.
Any time the group name is a recipient (@option{-r} or
@option{--recipient}), it will be expanded to the values
specified. Multiple groups with the same name are automatically merged
into a single group.

The values are @code{key IDs} or fingerprints, but any key description
is accepted. Note that a value with spaces in it will be treated as
two different values. Note also there is only one level of expansion
--- you cannot make an group that points to another group. When used
from the command line, it may be necessary to quote the argument to
this option to prevent the shell from treating it as multiple
arguments.

@item --ungroup @code{name}
Remove a given entry from the @option{--group} list.

@item --no-groups
Remove all entries from the @option{--group} list.

@item --local-user @var{name}
@itemx -u
@opindex local-user
Use @var{name} as the key to sign with. Note that this option overrides
@option{--default-key}.

@item --try-all-secrets
Don't look at the key ID as stored in the message but try all secret
keys in turn to find the right decryption key. This option forces the
behaviour as used by anonymous recipients (created by using
@option{--throw-keyids}) and might come handy in case where an encrypted
message contains a bogus key ID.





@end table

@c *******************************************
@c ********  INPUT AND OUTPUT  ***************
@c *******************************************
@node GPG Input and Output
@subsection Input and Output

@table @gnupgtabopt

@item --armor
@itemx -a
@opindex armor
Create ASCII armored output.  The default is to create the binary
OpenPGP format.

@item --no-armor
Assume the input data is not in ASCII armored format.

@item --output @var{file}
@itemx -o @var{file}
@opindex output
Write output to @var{file}.

@item --max-output @code{n}
@opindex max-output
This option sets a limit on the number of bytes that will be generated
when processing a file. Since OpenPGP supports various levels of
compression, it is possible that the plaintext of a given message may be
significantly larger than the original OpenPGP message. While GnuPG
works properly with such messages, there is often a desire to set a
maximum file size that will be generated before processing is forced to
stop by the OS limits. Defaults to 0, which means "no limit".

@item --import-options @code{parameters}
This is a space or comma delimited string that gives options for
importing keys. Options can be prepended with a `no-' to give the
opposite meaning. The options are:

@table @asis

@item import-local-sigs
Allow importing key signatures marked as "local". This is not
generally useful unless a shared keyring scheme is being used.
Defaults to no.

@item repair-pks-subkey-bug
During import, attempt to repair the damage caused by the PKS keyserver
bug (pre version 0.9.6) that mangles keys with multiple subkeys. Note
that this cannot completely repair the damaged key as some crucial data
is removed by the keyserver, but it does at least give you back one
subkey. Defaults to no for regular @option{--import} and to yes for
keyserver @option{--recv-keys}.

@item merge-only
During import, allow key updates to existing keys, but do not allow
any new keys to be imported. Defaults to no.

@item import-clean
After import, compact (remove all signatures except the
self-signature) any user IDs from the new key that are not usable.
Then, remove any signatures from the new key that are not usable.
This includes signatures that were issued by keys that are not present
on the keyring. This option is the same as running the @option{--edit-key}
command "clean" after import. Defaults to no.

@item import-minimal
Import the smallest key possible. This removes all signatures except
the most recent self-signature on each user ID. This option is the
same as running the @option{--edit-key} command "minimize" after import.
Defaults to no.
@end table

@item --export-options @code{parameters}
This is a space or comma delimited string that gives options for
exporting keys. Options can be prepended with a `no-' to give the
opposite meaning. The options are:

@table @asis

@item export-local-sigs
Allow exporting key signatures marked as "local". This is not
generally useful unless a shared keyring scheme is being used.
Defaults to no.

@item export-attributes
Include attribute user IDs (photo IDs) while exporting. This is
useful to export keys if they are going to be used by an OpenPGP
program that does not accept attribute user IDs. Defaults to yes.

@item export-sensitive-revkeys
Include designated revoker information that was marked as
"sensitive". Defaults to no.

@item export-reset-subkey-passwd
When using the @option{--export-secret-subkeys} command, this option resets
the passphrases for all exported subkeys to empty. This is useful
when the exported subkey is to be used on an unattended machine where
a passphrase doesn't necessarily make sense. Defaults to no.

@item export-clean
Compact (remove all signatures from) user IDs on the key being
exported if the user IDs are not usable. Also, do not export any
signatures that are not usable. This includes signatures that were
issued by keys that are not present on the keyring. This option is
the same as running the @option{--edit-key} command "clean" before export
except that the local copy of the key is not modified. Defaults to
no.

@item export-minimal
Export the smallest key possible. This removes all signatures except the
most recent self-signature on each user ID. This option is the same as
running the @option{--edit-key} command "minimize" before export except
that the local copy of the key is not modified. Defaults to no.
@end table

@item --with-colons
@opindex with-colons
Print key listings delimited by colons. Note that the output will be
encoded in UTF-8 regardless of any @option{--display-charset} setting. This
format is useful when GnuPG is called from scripts and other programs
as it is easily machine parsed. The details of this format are
documented in the file @file{doc/DETAILS}, which is included in the GnuPG
source distribution.

@item --fixed-list-mode
@opindex fixed-list-mode
Do not merge primary user ID and primary key in @option{--with-colon}
listing mode and print all timestamps as seconds since 1970-01-01.
@ifclear gpgone
Since GnuPG 2.0.10, this mode is always used and thus this option is
obsolete; it does not harm to use it though.
@end ifclear

@item --with-fingerprint
@opindex with-fingerprint
Same as the command @option{--fingerprint} but changes only the format
of the output and may be used together with another command.


@end table

@c *******************************************
@c ********  OPENPGP OPTIONS  ****************
@c *******************************************
@node OpenPGP Options
@subsection OpenPGP protocol specific options.

@table @gnupgtabopt

@item -t, --textmode
@itemx --no-textmode
Treat input files as text and store them in the OpenPGP canonical text
form with standard "CRLF" line endings. This also sets the necessary
flags to inform the recipient that the encrypted or signed data is text
and may need its line endings converted back to whatever the local
system uses. This option is useful when communicating between two
platforms that have different line ending conventions (UNIX-like to Mac,
Mac to Windows, etc). @option{--no-textmode} disables this option, and
is the default.

@ifset gpgone
If @option{-t} (but not @option{--textmode}) is used together with
armoring and signing, this enables clearsigned messages. This kludge is
needed for command-line compatibility with command-line versions of PGP;
normally you would use @option{--sign} or @option{--clearsign} to select
the type of the signature.
@end ifset

@item --force-v3-sigs
@itemx --no-force-v3-sigs
OpenPGP states that an implementation should generate v4 signatures
but PGP versions 5 through 7 only recognize v4 signatures on key
material. This option forces v3 signatures for signatures on data.
Note that this option implies @option{--ask-sig-expire},
@option{--sig-policy-url}, @option{--sig-notation}, and
@option{--sig-keyserver-url}, as these features cannot be used with v3
signatures.  @option{--no-force-v3-sigs} disables this option.

@item --force-v4-certs
@itemx --no-force-v4-certs
Always use v4 key signatures even on v3 keys. This option also
changes the default hash algorithm for v3 RSA keys from MD5 to SHA-1.
@option{--no-force-v4-certs} disables this option.

@item --force-mdc
Force the use of encryption with a modification detection code. This
is always used with the newer ciphers (those with a blocksize greater
than 64 bits), or if all of the recipient keys indicate MDC support in
their feature flags.

@item --disable-mdc
Disable the use of the modification detection code. Note that by
using this option, the encrypted message becomes vulnerable to a
message modification attack.

@item --personal-cipher-preferences @code{string}
Set the list of personal cipher preferences to @code{string}.  Use
@command{@gpgname --version} to get a list of available algorithms,
and use @code{none} to set no preference at all.  This allows the user
to safely override the algorithm chosen by the recipient key
preferences, as GPG will only select an algorithm that is usable by
all recipients.  The most highly ranked cipher in this list is also
used for the @option{--symmetric} encryption command.

@item --personal-digest-preferences @code{string}
Set the list of personal digest preferences to @code{string}.  Use
@command{@gpgname --version} to get a list of available algorithms,
and use @code{none} to set no preference at all.  This allows the user
to safely override the algorithm chosen by the recipient key
preferences, as GPG will only select an algorithm that is usable by
all recipients.  The most highly ranked digest algorithm in this list
is also used when signing without encryption
(e.g. @option{--clearsign} or @option{--sign}). The default value is
SHA-1.

@item --personal-compress-preferences @code{string}
Set the list of personal compression preferences to @code{string}.
Use @command{@gpgname --version} to get a list of available
algorithms, and use @code{none} to set no preference at all.  This
allows the user to safely override the algorithm chosen by the
recipient key preferences, as GPG will only select an algorithm that
is usable by all recipients.  The most highly ranked compression
algorithm in this list is also used when there are no recipient keys
to consider (e.g. @option{--symmetric}).

@item --s2k-cipher-algo @code{name}
Use @code{name} as the cipher algorithm used to protect secret keys.
The default cipher is CAST5. This cipher is also used for
conventional encryption if @option{--personal-cipher-preferences} and
@option{--cipher-algo} is not given.

@item --s2k-digest-algo @code{name}
Use @code{name} as the digest algorithm used to mangle the passphrases.
The default algorithm is SHA-1.

@item --s2k-mode @code{n}
Selects how passphrases are mangled. If @code{n} is 0 a plain
passphrase (which is not recommended) will be used, a 1 adds a salt to
the passphrase and a 3 (the default) iterates the whole process a
number of times (see --s2k-count).  Unless @option{--rfc1991} is used,
this mode is also used for conventional encryption.

@item --s2k-count @code{n}
Specify how many times the passphrase mangling is repeated.  This
value may range between 1024 and 65011712 inclusive, and the default
is 65536.  Note that not all values in the 1024-65011712 range are
legal and if an illegal value is selected, GnuPG will round up to the
nearest legal value.  This option is only meaningful if
@option{--s2k-mode} is 3.


@end table

@c ***************************
@c ******* Compliance ********
@c ***************************
@subsection Compliance options

These options control what GnuPG is compliant to. Only one of these
options may be active at a time. Note that the default setting of
this is nearly always the correct one. See the INTEROPERABILITY WITH
OTHER OPENPGP PROGRAMS section below before using one of these
options.

@table @gnupgtabopt

@item --gnupg
@opindex gnupg
Use standard GnuPG behavior. This is essentially OpenPGP behavior
(see @option{--openpgp}), but with some additional workarounds for common
compatibility problems in different versions of PGP. This is the
default option, so it is not generally needed, but it may be useful to
override a different compliance option in the gpg.conf file.

@item --openpgp
@opindex openpgp
Reset all packet, cipher and digest options to strict OpenPGP
behavior. Use this option to reset all previous options like
@option{--s2k-*}, @option{--cipher-algo}, @option{--digest-algo} and
@option{--compress-algo} to OpenPGP compliant values. All PGP
workarounds are disabled.

@item --rfc4880
@opindex rfc4880
Reset all packet, cipher and digest options to strict RFC-4880
behavior. Note that this is currently the same thing as
@option{--openpgp}.

@item --rfc2440
@opindex rfc2440
Reset all packet, cipher and digest options to strict RFC-2440
behavior.

@item --rfc1991
@opindex rfc1991
Try to be more RFC-1991 (PGP 2.x) compliant.

@item --pgp2
@opindex pgp2
Set up all options to be as PGP 2.x compliant as possible, and warn if
an action is taken (e.g. encrypting to a non-RSA key) that will create
a message that PGP 2.x will not be able to handle. Note that `PGP
2.x' here means `MIT PGP 2.6.2'. There are other versions of PGP 2.x
available, but the MIT release is a good common baseline.

This option implies @option{--rfc1991 --disable-mdc
--no-force-v4-certs --escape-from-lines --force-v3-sigs --cipher-algo
IDEA --digest-algo MD5 --compress-algo ZIP}. It also disables
@option{--textmode} when encrypting.

@item --pgp6
@opindex pgp6
Set up all options to be as PGP 6 compliant as possible. This
restricts you to the ciphers IDEA (if the IDEA plugin is installed),
3DES, and CAST5, the hashes MD5, SHA1 and RIPEMD160, and the
compression algorithms none and ZIP. This also disables
--throw-keyids, and making signatures with signing subkeys as PGP 6
does not understand signatures made by signing subkeys.

This option implies @option{--disable-mdc --escape-from-lines
--force-v3-sigs}.

@item --pgp7
@opindex pgp7
Set up all options to be as PGP 7 compliant as possible. This is
identical to @option{--pgp6} except that MDCs are not disabled, and the
list of allowable ciphers is expanded to add AES128, AES192, AES256, and
TWOFISH.

@item --pgp8
@opindex pgp8
Set up all options to be as PGP 8 compliant as possible. PGP 8 is a lot
closer to the OpenPGP standard than previous versions of PGP, so all
this does is disable @option{--throw-keyids} and set
@option{--escape-from-lines}.  All algorithms are allowed except for the
SHA224, SHA384, and SHA512 digests.

@end table


@c *******************************************
@c ********  ESOTERIC OPTIONS  ***************
@c *******************************************
@node GPG Esoteric Options
@subsection Doing things one usually doesn't want to do.

@table @gnupgtabopt

@item -n
@itemx --dry-run
@opindex dry-run
Don't make any changes (this is not completely implemented).

@item --list-only
Changes the behaviour of some commands. This is like @option{--dry-run} but
different in some cases. The semantic of this command may be extended in
the future. Currently it only skips the actual decryption pass and
therefore enables a fast listing of the encryption keys.

@item -i
@itemx --interactive
@opindex interactive
Prompt before overwriting any files.

@item --debug-level @var{level}
@opindex debug-level
Select the debug level for investigating problems. @var{level} may be
a numeric value or by a keyword:

@table @code
@item none
No debugging at all.  A value of less than 1 may be used instead of
the keyword.
@item basic  
Some basic debug messages.  A value between 1 and 2 may be used
instead of the keyword.
@item advanced
More verbose debug messages.  A value between 3 and 5 may be used
instead of the keyword.
@item expert
Even more detailed messages.  A value between 6 and 8 may be used
instead of the keyword.
@item guru
All of the debug messages you can get. A value greater than 8 may be
used instead of the keyword.  The creation of hash tracing files is
only enabled if the keyword is used.
@end table

How these messages are mapped to the actual debugging flags is not
specified and may change with newer releases of this program. They are
however carefully selected to best aid in debugging.

@item --debug @var{flags}
@opindex debug
Set debugging flags. All flags are or-ed and @var{flags} may
be given in C syntax (e.g. 0x0042).

@item --debug-all
Set all useful debugging flags.

@ifset gpgone
@item --debug-ccid-driver
Enable debug output from the included CCID driver for smartcards.
Note that this option is only available on some system.
@end ifset

@item --enable-progress-filter
Enable certain PROGRESS status outputs. This option allows frontends
to display a progress indicator while gpg is processing larger files.
There is a slight performance overhead using it.

@item --status-fd @code{n}
Write special status strings to the file descriptor @code{n}.
See the file DETAILS in the documentation for a listing of them.

@item --status-file @code{file}
Same as @option{--status-fd}, except the status data is written to file
@code{file}.

@item --logger-fd @code{n}
Write log output to file descriptor @code{n} and not to STDERR.

@item --log-file @code{file}
@itemx --logger-file @code{file}
Same as @option{--logger-fd}, except the logger data is written to file
@code{file}.  Note that @option{--log-file} is only implemented for
GnuPG-2.

@item --attribute-fd @code{n}
Write attribute subpackets to the file descriptor @code{n}. This is most
useful for use with @option{--status-fd}, since the status messages are
needed to separate out the various subpackets from the stream delivered
to the file descriptor.

@item --attribute-file @code{file}
Same as @option{--attribute-fd}, except the attribute data is written to
file @code{file}.

@item --comment @code{string}
@itemx --no-comments
Use @code{string} as a comment string in clear text signatures and ASCII
armored messages or keys (see @option{--armor}). The default behavior is
not to use a comment string. @option{--comment} may be repeated multiple
times to get multiple comment strings. @option{--no-comments} removes
all comments.  It is a good idea to keep the length of a single comment
below 60 characters to avoid problems with mail programs wrapping such
lines.  Note that comment lines, like all other header lines, are not
protected by the signature.

@item --emit-version
@itemx --no-emit-version
Force inclusion of the version string in ASCII armored output.
@option{--no-emit-version} disables this option.

@item --sig-notation @code{name=value}
@itemx --cert-notation @code{name=value}
@itemx -N, --set-notation @code{name=value}
Put the name value pair into the signature as notation data.
@code{name} must consist only of printable characters or spaces, and
must contain a '@@' character in the form keyname@@domain.example.com
(substituting the appropriate keyname and domain name, of course).  This
is to help prevent pollution of the IETF reserved notation
namespace. The @option{--expert} flag overrides the '@@'
check. @code{value} may be any printable string; it will be encoded in
UTF8, so you should check that your @option{--display-charset} is set
correctly. If you prefix @code{name} with an exclamation mark (!), the
notation data will be flagged as critical
(rfc2440:5.2.3.15). @option{--sig-notation} sets a notation for data
signatures. @option{--cert-notation} sets a notation for key signatures
(certifications). @option{--set-notation} sets both.

There are special codes that may be used in notation names. "%k" will
be expanded into the key ID of the key being signed, "%K" into the
long key ID of the key being signed, "%f" into the fingerprint of the
key being signed, "%s" into the key ID of the key making the
signature, "%S" into the long key ID of the key making the signature,
"%g" into the fingerprint of the key making the signature (which might
be a subkey), "%p" into the fingerprint of the primary key of the key
making the signature, "%c" into the signature count from the OpenPGP
smartcard, and "%%" results in a single "%". %k, %K, and %f are only
meaningful when making a key signature (certification), and %c is only
meaningful when using the OpenPGP smartcard.

@item --sig-policy-url @code{string}
@itemx --cert-policy-url @code{string}
@itemx --set-policy-url @code{string}
Use @code{string} as a Policy URL for signatures (rfc2440:5.2.3.19).  If
you prefix it with an exclamation mark (!), the policy URL packet will
be flagged as critical. @option{--sig-policy-url} sets a policy url for
data signatures. @option{--cert-policy-url} sets a policy url for key
signatures (certifications). @option{--set-policy-url} sets both.

The same %-expandos used for notation data are available here as well.

@item --sig-keyserver-url @code{string}
Use @code{string} as a preferred keyserver URL for data signatures. If
you prefix it with an exclamation mark (!), the keyserver URL packet
will be flagged as critical.

The same %-expandos used for notation data are available here as well.

@item --set-filename @code{string}
Use @code{string} as the filename which is stored inside messages.
This overrides the default, which is to use the actual filename of the
file being encrypted.

@item --for-your-eyes-only
@itemx --no-for-your-eyes-only
Set the `for your eyes only' flag in the message. This causes GnuPG to
refuse to save the file unless the @option{--output} option is given,
and PGP to use a "secure viewer" with a claimed Tempest-resistant font
to display the message. This option overrides @option{--set-filename}.
@option{--no-for-your-eyes-only} disables this option.

@item --use-embedded-filename
@itemx --no-use-embedded-filename
Try to create a file with a name as embedded in the data. This can be
a dangerous option as it allows to overwrite files. Defaults to no.

@item --cipher-algo @code{name}
Use @code{name} as cipher algorithm. Running the program with the
command @option{--version} yields a list of supported algorithms. If
this is not used the cipher algorithm is selected from the preferences
stored with the key. In general, you do not want to use this option as
it allows you to violate the OpenPGP standard.
@option{--personal-cipher-preferences} is the safe way to accomplish the
same thing.

@item --digest-algo @code{name}
Use @code{name} as the message digest algorithm. Running the program
with the command @option{--version} yields a list of supported algorithms. In
general, you do not want to use this option as it allows you to
violate the OpenPGP standard. @option{--personal-digest-preferences} is the
safe way to accomplish the same thing.

@item --compress-algo @code{name}
Use compression algorithm @code{name}. "zlib" is RFC-1950 ZLIB
compression. "zip" is RFC-1951 ZIP compression which is used by PGP.
"bzip2" is a more modern compression scheme that can compress some
things better than zip or zlib, but at the cost of more memory used
during compression and decompression. "uncompressed" or "none"
disables compression. If this option is not used, the default
behavior is to examine the recipient key preferences to see which
algorithms the recipient supports. If all else fails, ZIP is used for
maximum compatibility.

ZLIB may give better compression results than ZIP, as the compression
window size is not limited to 8k. BZIP2 may give even better
compression results than that, but will use a significantly larger
amount of memory while compressing and decompressing. This may be
significant in low memory situations. Note, however, that PGP (all
versions) only supports ZIP compression. Using any algorithm other
than ZIP or "none" will make the message unreadable with PGP. In
general, you do not want to use this option as it allows you to
violate the OpenPGP standard. @option{--personal-compress-preferences} is the
safe way to accomplish the same thing.

@item --cert-digest-algo @code{name}
Use @code{name} as the message digest algorithm used when signing a
key. Running the program with the command @option{--version} yields a
list of supported algorithms. Be aware that if you choose an algorithm
that GnuPG supports but other OpenPGP implementations do not, then some
users will not be able to use the key signatures you make, or quite
possibly your entire key.

@item --disable-cipher-algo @code{name}
Never allow the use of @code{name} as cipher algorithm.
The given name will not be checked so that a later loaded algorithm
will still get disabled.

@item --disable-pubkey-algo @code{name}
Never allow the use of @code{name} as public key algorithm.
The given name will not be checked so that a later loaded algorithm
will still get disabled.

@item --throw-keyids
@itemx --no-throw-keyids
Do not put the recipient key IDs into encrypted messages. This helps to
hide the receivers of the message and is a limited countermeasure
against traffic analysis.@footnote{Using a little social engineering
anyone who is able to decrypt the message can check whether one of the
other recipients is the one he suspects.}  On the receiving side, it may
slow down the decryption process because all available secret keys must
be tried.  @option{--no-throw-keyids} disables this option. This option
is essentially the same as using @option{--hidden-recipient} for all
recipients.

@item --not-dash-escaped
This option changes the behavior of cleartext signatures
so that they can be used for patch files. You should not
send such an armored file via email because all spaces
and line endings are hashed too. You can not use this
option for data which has 5 dashes at the beginning of a
line, patch files don't have this. A special armor header
line tells GnuPG about this cleartext signature option.

@item --escape-from-lines
@itemx --no-escape-from-lines
Because some mailers change lines starting with "From " to ">From " it
is good to handle such lines in a special way when creating cleartext
signatures to prevent the mail system from breaking the signature. Note
that all other PGP versions do it this way too.  Enabled by
default. @option{--no-escape-from-lines} disables this option.

@item --passphrase-repeat @code{n}
Specify how many times @command{@gpgname} will request a new
passphrase be repeated.  This is useful for helping memorize a
passphrase.  Defaults to 1 repetition.

@item --passphrase-fd @code{n}
Read the passphrase from file descriptor @code{n}. Only the first line
will be read from file descriptor @code{n}. If you use 0 for @code{n},
the passphrase will be read from STDIN. This can only be used if only
one passphrase is supplied.
@ifclear gpgone
Note that this passphrase is only used if the option @option{--batch}
has also been given.  This is different from @command{gpg}.
@end ifclear

@item --passphrase-file @code{file}
Read the passphrase from file @code{file}. Only the first line will
be read from file @code{file}. This can only be used if only one
passphrase is supplied. Obviously, a passphrase stored in a file is
of questionable security if other users can read this file. Don't use
this option if you can avoid it.
@ifclear gpgone
Note that this passphrase is only used if the option @option{--batch}
has also been given.  This is different from @command{gpg}.
@end ifclear

@item --passphrase @code{string}
Use @code{string} as the passphrase. This can only be used if only one
passphrase is supplied. Obviously, this is of very questionable
security on a multi-user system. Don't use this option if you can
avoid it.
@ifclear gpgone
Note that this passphrase is only used if the option @option{--batch}
has also been given.  This is different from @command{gpg}.
@end ifclear

@item --command-fd @code{n}
This is a replacement for the deprecated shared-memory IPC mode.
If this option is enabled, user input on questions is not expected
from the TTY but from the given file descriptor. It should be used
together with @option{--status-fd}. See the file doc/DETAILS in the source
distribution for details on how to use it.

@item --command-file @code{file}
Same as @option{--command-fd}, except the commands are read out of file
@code{file}

@item --allow-non-selfsigned-uid
@itemx --no-allow-non-selfsigned-uid
Allow the import and use of keys with user IDs which are not
self-signed. This is not recommended, as a non self-signed user ID is
trivial to forge. @option{--no-allow-non-selfsigned-uid} disables.

@item --allow-freeform-uid
Disable all checks on the form of the user ID while generating a new
one. This option should only be used in very special environments as
it does not ensure the de-facto standard format of user IDs.

@item --ignore-time-conflict
GnuPG normally checks that the timestamps associated with keys and
signatures have plausible values. However, sometimes a signature
seems to be older than the key due to clock problems. This option
makes these checks just a warning. See also @option{--ignore-valid-from} for
timestamp issues on subkeys.

@item --ignore-valid-from
GnuPG normally does not select and use subkeys created in the future.
This option allows the use of such keys and thus exhibits the
pre-1.0.7 behaviour. You should not use this option unless you there
is some clock problem. See also @option{--ignore-time-conflict} for timestamp
issues with signatures.

@item --ignore-crc-error
The ASCII armor used by OpenPGP is protected by a CRC checksum against
transmission errors. Occasionally the CRC gets mangled somewhere on
the transmission channel but the actual content (which is protected by
the OpenPGP protocol anyway) is still okay. This option allows GnuPG
to ignore CRC errors.

@item --ignore-mdc-error
This option changes a MDC integrity protection failure into a warning.
This can be useful if a message is partially corrupt, but it is
necessary to get as much data as possible out of the corrupt message.
However, be aware that a MDC protection failure may also mean that the
message was tampered with intentionally by an attacker.

@item --no-default-keyring
Do not add the default keyrings to the list of keyrings. Note that
GnuPG will not operate without any keyrings, so if you use this option
and do not provide alternate keyrings via @option{--keyring} or
@option{--secret-keyring}, then GnuPG will still use the default public or
secret keyrings.

@item --skip-verify
Skip the signature verification step. This may be
used to make the decryption faster if the signature
verification is not needed.

@item --with-key-data
Print key listings delimited by colons (like @option{--with-colons}) and
print the public key data.

@item --fast-list-mode
Changes the output of the list commands to work faster; this is achieved
by leaving some parts empty. Some applications don't need the user ID
and the trust information given in the listings. By using this options
they can get a faster listing. The exact behaviour of this option may
change in future versions.  If you are missing some information, don't
use this option.

@item --no-literal
This is not for normal use. Use the source to see for what it might be useful.

@item --set-filesize
This is not for normal use. Use the source to see for what it might be useful.

@item --show-session-key
Display the session key used for one message. See
@option{--override-session-key} for the counterpart of this option.

We think that Key Escrow is a Bad Thing; however the user should have
the freedom to decide whether to go to prison or to reveal the content
of one specific message without compromising all messages ever
encrypted for one secret key. DON'T USE IT UNLESS YOU ARE REALLY
FORCED TO DO SO.

@item --override-session-key @code{string}
Don't use the public key but the session key @code{string}. The format
of this string is the same as the one printed by
@option{--show-session-key}. This option is normally not used but comes
handy in case someone forces you to reveal the content of an encrypted
message; using this option you can do this without handing out the
secret key.

@item --ask-sig-expire
@itemx --no-ask-sig-expire
When making a data signature, prompt for an expiration time. If this
option is not specified, the expiration time set via
@option{--default-sig-expire} is used. @option{--no-ask-sig-expire}
disables this option. Note that by default, @option{--force-v3-sigs} is
set which also disables this option. If you want signature expiration,
you must set @option{--no-force-v3-sigs} as well as turning
@option{--ask-sig-expire} on.

@item --default-sig-expire
The default expiration time to use for signature expiration. Valid
values are "0" for no expiration, a number followed by the letter d
(for days), w (for weeks), m (for months), or y (for years) (for
example "2m" for two months, or "5y" for five years), or an absolute
date in the form YYYY-MM-DD. Defaults to "0".

@item --ask-cert-expire
@itemx --no-ask-cert-expire
When making a key signature, prompt for an expiration time. If this
option is not specified, the expiration time set via
@option{--default-cert-expire} is used. @option{--no-ask-cert-expire}
disables this option.

@item --default-cert-expire
The default expiration time to use for key signature expiration.
Valid values are "0" for no expiration, a number followed by the
letter d (for days), w (for weeks), m (for months), or y (for years)
(for example "2m" for two months, or "5y" for five years), or an
absolute date in the form YYYY-MM-DD. Defaults to "0".

@item --allow-secret-key-import
This is an obsolete option and is not used anywhere.

@item --allow-multiple-messages
@item --no-allow-multiple-messages
Allow processing of multiple OpenPGP messages contained in a single file
or stream.  Some programs that call GPG are not prepared to deal with
multiple messages being processed together, so this option defaults to
no.  Note that versions of GPG prior to 1.4.7 always allowed multiple
messages.  

Warning: Do not use this option unless you need it as a temporary
workaround!


@item --enable-special-filenames
This options enables a mode in which filenames of the form
@file{-&n}, where n is a non-negative decimal number,
refer to the file descriptor n and not to a file with that name.

@item --no-expensive-trust-checks
Experimental use only.

@item --preserve-permissions
Don't change the permissions of a secret keyring back to user
read/write only. Use this option only if you really know what you are doing.

@item --default-preference-list @code{string}
@opindex default-preference-list
Set the list of default preferences to @code{string}. This preference
list is used for new keys and becomes the default for "setpref" in the
edit menu.

@item --default-keyserver-url @code{name}
@opindex default-keyserver-url
Set the default keyserver URL to @code{name}. This keyserver will be
used as the keyserver URL when writing a new self-signature on a key,
which includes key generation and changing preferences.

@item --list-config
@opindex list-config
Display various internal configuration parameters of GnuPG. This option
is intended for external programs that call GnuPG to perform tasks, and
is thus not generally useful. See the file @file{doc/DETAILS} in the
source distribution for the details of which configuration items may be
listed. @option{--list-config} is only usable with
@option{--with-colons} set.

@item --gpgconf-list
@opindex gpgconf-list
This command is similar to @option{--list-config} but in general only
internally used by the @command{gpgconf} tool.

@item --gpgconf-test
@opindex gpgconf-test
This is more or less dummy action.  However it parses the configuration
file and returns with failure if the configuration file would prevent
@command{gpg} from startup.  Thus it may be used to run a syntax check
on the configuration file.

@end table

@c *******************************
@c ******* Deprecated ************
@c *******************************
@subsection Deprecated options

@table @gnupgtabopt

@ifset gpgone
@item --load-extension @code{name}
Load an extension module. If @code{name} does not contain a slash it is
searched for in the directory configured when GnuPG was built
(generally "/usr/local/lib/gnupg"). Extensions are not generally
useful anymore, and the use of this option is deprecated.
@end ifset

@item --show-photos
@itemx --no-show-photos
Causes @option{--list-keys}, @option{--list-sigs},
@option{--list-public-keys}, @option{--list-secret-keys}, and verifying
a signature to also display the photo ID attached to the key, if
any. See also @option{--photo-viewer}. These options are deprecated. Use
@option{--list-options [no-]show-photos} and/or @option{--verify-options
[no-]show-photos} instead.

@item --show-keyring
Display the keyring name at the head of key listings to show which
keyring a given key resides on. This option is deprecated: use
@option{--list-options [no-]show-keyring} instead.

@ifset gpgone
@item --ctapi-driver @code{file}
Use @code{file} to access the smartcard reader. The current default
is `libtowitoko.so'. Note that the use of this interface is
deprecated; it may be removed in future releases.
@end ifset

@item --always-trust
Identical to @option{--trust-model always}. This option is deprecated.

@item --show-notation
@itemx --no-show-notation
Show signature notations in the @option{--list-sigs} or @option{--check-sigs} listings
as well as when verifying a signature with a notation in it. These
options are deprecated. Use @option{--list-options [no-]show-notation}
and/or @option{--verify-options [no-]show-notation} instead.

@item --show-policy-url
@itemx --no-show-policy-url
Show policy URLs in the @option{--list-sigs} or @option{--check-sigs}
listings as well as when verifying a signature with a policy URL in
it. These options are deprecated. Use @option{--list-options
[no-]show-policy-url} and/or @option{--verify-options
[no-]show-policy-url} instead.


@end table


@c *******************************************
@c ***************            ****************
@c ***************   FILES    ****************
@c ***************            ****************
@c *******************************************
@mansect files
@node GPG Configuration
@section Configuration files

There are a few configuration files to control certain aspects of
@command{@gpgname}'s operation. Unless noted, they are expected in the
current home directory (@pxref{option --homedir}).

@table @file

@item gpg.conf
@cindex gpg.conf
This is the standard configuration file read by @command{@gpgname} on
startup.  It may contain any valid long option; the leading two dashes
may not be entered and the option may not be abbreviated.  This default
name may be changed on the command line (@pxref{option --options}).
You should backup this file.

@end table

@c man:.RE
Note that on larger installations, it is useful to put predefined files
into the directory @file{/etc/skel/.gnupg/} so that newly created users
start up with a working configuration.
@ifclear gpgone
For existing users the a small
helper script is provided to create these files (@pxref{addgnupghome}).
@end ifclear

For internal purposes @command{@gpgname} creates and maintains a few other
files; They all live in in the current home directory (@pxref{option
--homedir}).  Only the @command{@gpgname} may modify these files.


@table @file
@item ~/.gnupg/secring.gpg
The secret keyring.  You should backup this file.

@item ~/.gnupg/secring.gpg.lock
The lock file for the secret keyring.

@item ~/.gnupg/pubring.gpg
The public keyring.  You should backup this file.

@item ~/.gnupg/pubring.gpg.lock
The lock file for the public keyring.

@item ~/.gnupg/trustdb.gpg
The trust database.  There is no need to backup this file; it is better
to backup the ownertrust values (@pxref{option --export-ownertrust}).

@item ~/.gnupg/trustdb.gpg.lock
The lock file for the trust database.

@item ~/.gnupg/random_seed
A file used to preserve the state of the internal random pool.

@item /usr[/local]/share/gnupg/options.skel
The skeleton options file.

@item /usr[/local]/lib/gnupg/
Default location for extensions.

@end table

@c man:.RE
Operation is further controlled by a few environment variables:

@table @asis

@item HOME
Used to locate the default home directory.

@item GNUPGHOME
If set directory used instead of "~/.gnupg".

@item GPG_AGENT_INFO
Used to locate the gpg-agent.
@ifset gpgone
This is only honored when @option{--use-agent} is set.
@end ifset
The value consists of 3 colon delimited fields: The first is the path
to the Unix Domain Socket, the second the PID of the gpg-agent and the
protocol version which should be set to 1. When starting the gpg-agent
as described in its documentation, this variable is set to the correct
value. The option @option{--gpg-agent-info} can be used to override it.

@item PINENTRY_USER_DATA
This value is passed via gpg-agent to pinentry.  It is useful to convey
extra information to a custom pinentry.

@item COLUMNS
@itemx LINES
Used to size some displays to the full size of the screen.


@item LANGUAGE
Apart from its use by GNU, it is used in the W32 version to override the
language selection done through the Registry.  If used and set to a
valid and available language name (@var{langid}), the file with the
translation is loaded from
@code{@var{gpgdir}/gnupg.nls/@var{langid}.mo}.  Here @var{gpgdir} is the
directory out of which the gpg binary has been loaded.  If it can't be
loaded the Registry is tried and as last resort the native Windows
locale system is used.  

@end table


@c *******************************************
@c ***************            ****************
@c ***************  EXAMPLES  ****************
@c ***************            ****************
@c *******************************************
@mansect examples
@node GPG Examples
@section Examples

@table @asis

@item gpg -se -r @code{Bob} @code{file}
sign and encrypt for user Bob

@item gpg --clearsign @code{file}
make a clear text signature

@item gpg -sb @code{file}
make a detached signature

@item gpg -u 0x12345678 -sb @code{file}
make a detached signature with the key 0x12345678

@item gpg --list-keys @code{user_ID}
show keys

@item gpg --fingerprint @code{user_ID}
show fingerprint

@item gpg --verify @code{pgpfile}
@itemx gpg --verify @code{sigfile}
Verify the signature of the file but do not output the data. The
second form is used for detached signatures, where @code{sigfile}
is the detached signature (either ASCII armored or binary) and
are the signed data; if this is not given, the name of
the file holding the signed data is constructed by cutting off the
extension (".asc" or ".sig") of @code{sigfile} or by asking the
user for the filename.
@end table


@c *******************************************
@c ***************            ****************
@c ***************  USER ID   ****************
@c ***************            ****************
@c *******************************************
@mansect how to specify a user id
@ifset isman
@include specify-user-id.texi
@end ifset

@mansect return value
@chapheading RETURN VALUE

The program returns 0 if everything was fine, 1 if at least
a signature was bad, and other error codes for fatal errors.

@mansect warnings
@chapheading WARNINGS

Use a *good* password for your user account and a *good* passphrase
to protect your secret key. This passphrase is the weakest part of the
whole system. Programs to do dictionary attacks on your secret keyring
are very easy to write and so you should protect your "~/.gnupg/"
directory very well.

Keep in mind that, if this program is used over a network (telnet), it
is *very* easy to spy out your passphrase!

If you are going to verify detached signatures, make sure that the
program knows about it; either give both filenames on the command line
or use @samp{-} to specify STDIN.

@mansect interoperability
@chapheading INTEROPERABILITY WITH OTHER OPENPGP PROGRAMS

GnuPG tries to be a very flexible implementation of the OpenPGP
standard. In particular, GnuPG implements many of the optional parts
of the standard, such as the SHA-512 hash, and the ZLIB and BZIP2
compression algorithms. It is important to be aware that not all
OpenPGP programs implement these optional algorithms and that by
forcing their use via the @option{--cipher-algo},
@option{--digest-algo}, @option{--cert-digest-algo}, or
@option{--compress-algo} options in GnuPG, it is possible to create a
perfectly valid OpenPGP message, but one that cannot be read by the
intended recipient.

There are dozens of variations of OpenPGP programs available, and each
supports a slightly different subset of these optional algorithms.
For example, until recently, no (unhacked) version of PGP supported
the BLOWFISH cipher algorithm. A message using BLOWFISH simply could
not be read by a PGP user. By default, GnuPG uses the standard
OpenPGP preferences system that will always do the right thing and
create messages that are usable by all recipients, regardless of which
OpenPGP program they use. Only override this safe default if you
really know what you are doing.

If you absolutely must override the safe default, or if the preferences
on a given key are invalid for some reason, you are far better off using
the @option{--pgp6}, @option{--pgp7}, or @option{--pgp8} options. These
options are safe as they do not force any particular algorithms in
violation of OpenPGP, but rather reduce the available algorithms to a
"PGP-safe" list.

@mansect bugs
@chapheading BUGS

On many systems this program should be installed as setuid(root). This
is necessary to lock memory pages. Locking memory pages prevents the
operating system from writing memory pages (which may contain
passphrases or other sensitive material) to disk. If you get no
warning message about insecure memory your operating system supports
locking without being root. The program drops root privileges as soon
as locked memory is allocated.

Note also that some systems (especially laptops) have the ability to
``suspend to disk'' (also known as ``safe sleep'' or ``hibernate'').
This writes all memory to disk before going into a low power or even
powered off mode.  Unless measures are taken in the operating system
to protect the saved memory, passphrases or other sensitive material
may be recoverable from it later.

@mansect see also
@ifset isman
@command{gpgv}(1), 
@ifclear gpgone
@command{gpgsm}(1), 
@command{gpg-agent}(1)
@end ifclear
@end ifset
@include see-also-note.texi
